# /---------------------------------------------------------------------------
# littleAdjustmentMap: (NotRequired - Default map:{})
#
# The various settings about a little adjustment.
#
# o isAvailableAddingSchemaToTableSqlName: (NotRequired - Default false)
# o isAvailableAddingCatalogToTableSqlName: (NotRequired - Default false)
# o isAvailableDatabaseDependency: (NotRequired - Default false)
# o isAvailableDatabaseNativeJDBC: (NotRequired - Default false)
# o classificationUndefinedHandlingType: (NotRequired - Default LOGGING)
# o isEntityConvertEmptyStringToNull: (NotRequired - Default false)
# o isTableDispNameUpperCase: (NotRequired - Default false)
# o isTableSqlNameUpperCase: (NotRequired - Default false)
# o isColumnSqlNameUpperCase: (NotRequired - Default false)
# o isSpecifyColumnRequired: (NotRequired - Default false)
# o extendedDBFluteInitializerClass: (NotRequired - Default null)
# o shortCharHandlingMode: (NotRequired - Default NONE)
# o quoteTableNameList: (NotRequired - Default list:{})
# o quoteColumnNameList: (NotRequired - Default list:{})
# o columnNullObjectMap: (NotRequired - Default map:{})
# o relationalNullObjectMap: (NotRequired - Default map:{})
# o cursorSelectFetchSize: (NotRequired - Default null)
# o refreshMap: (NotRequired - Default map:{})
# o optimisticLockMap: (NotRequired - Default map:{})
#
# *The line that starts with '#' means comment-out.
#
map:{
    # _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
    # TODO jflute migrating
    # http://d.hatena.ne.jp/jflute/20140530/java8
    # _/_/_/_/_/_/_/_/_/
    # compile compatible (true if compatible)
    ; isMakeDirectConditionBeanSetup = true
    ; makeDirectConditionBeanSetupTableList = list:{ prefix:MEMBER ; PURCHASE ; prefix:Vendor ; prefix:White }
    ; isMakeDirectConditionOptionSetup = true
    ; isMakeDirectConditionManualOrder = false
    ; isCompatibleLoadReferrerOldOption = true
    ; isCompatibleOutsideSqlSqlCommentCheckDefault = true

    # the test of check count for next-key-lock of MySQL
    # set this property if you test it  
    ; isCheckCountBeforeQueryUpdate = true

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isAvailableAddingSchemaToTableSqlName: (NotRequired - Default false)
    #   [true]
    #     Add schema to table SQL name. (The table name on query is SCHEMA.TABLE)
    #
    #   [false]
    #     Non.
    #
    #; isAvailableAddingSchemaToTableSqlName = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isAvailableAddingCatalogToTableSqlName: (NotRequired - Default false)
    #   [true]
    #     Add catalog to table SQL name. (The table name on query is CATALOG.SCHEMA.TABLE)
    #     This property works only when isAvailableAddingSchemaToTableSqlName is true.
    #
    #   [false]
    #     Non.
    #
    #; isAvailableAddingCatalogToTableSqlName = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isAvailableDatabaseDependency: (NotRequired - Default false)
    #   [true]
    #     Generate the method that depends on the database.
    #     For example: cb.lockWithRR() at DB2.
    #
    #   [false]
    #     Non.
    #
    ; isAvailableDatabaseDependency = true
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isAvailableDatabaseNativeJDBC: (NotRequired - Default false)
    #   [true]
    #     Use classes of database native JDBC on generated classes
    #     to get best performances of DB access.
    #     Your project needs to refer to database native JDBC.
    #
    #   [false]
    #     Non.
    #
    # for the test of no dependency on MySQL
    ; isAvailableDatabaseNativeJDBC = true
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isAvailableNonPrimaryKeyWritable: (NotRequired - Default false)
    #   [true]
    #     Generate writable methods at non-primary-key table.
    #
    #   [false]
    #     Non.
    #
    #; isAvailableNonPrimaryKeyWritable = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isCheckSelectedClassification: (NotRequired - Default false)
    #   [true]
    #     Check a code of a column related to classification
    #     whether it's one of classification when it's selected.
    #     If wrong, throws an exception (when selecting).
    #
    #   [false]
    #     Non.
    #
    ; isCheckSelectedClassification = true
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isForceClassificationSetting: (NotRequired - Default false)
    #   [true]
    #     Force developer to set a code of a column related to classification
    #     by classification type-safe method of Entity and ConditionBean.
    #     A setter method of original type becomes 'protected' scope.
    #
    #   [false]
    #     Non.
    #
    ; isForceClassificationSetting = true
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isMakeEntityChaseRelation: (NotRequired - Default false)
    #   [true]
    #     Make chase-relation methods of entity.
    #     For example: member.chaseMemberStatus().getMemberStatusName()
    #     This statement doesn't have a null pointer if the MemberStatus doesn't exist.
    #
    #   [false]
    #     Non.
    #
    ; isMakeEntityChaseRelation = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isEntityConvertEmptyStringToNull: (NotRequired - Default false)
    #   [true]
    #     Convert empty-string data to null in entity.
    #
    #   [false]
    #     Non.
    #
    ; isEntityConvertEmptyStringToNull = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isMakeConditionQueryEqualEmptyString: (NotRequired - Default false)
    #   [true]
    #     Make equal-empty-string methods of condition-query.
    #     For example: cb.query().setMemberName_Equal_EmptyString()
    #
    #   [false]
    #     Non.
    #
    ; isMakeConditionQueryEqualEmptyString = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isPagingCountLater: (NotRequired - Default true)
    #   [true]
    #     The count SQL for paging are executed after paging main select.
    #
    #   [false]
    #     Non.
    #
    ; isPagingCountLater = true
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isPagingCountLeastJoin: (NotRequired - Default true)
    #   [true]
    #     Join statements in count SQL of paging select are trimmed
    #     for performance tuning. (only countable joins are valid)
    #
    #   [false]
    #     Non.
    #
    ; isPagingCountLeastJoin = true
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isInnerJoinAutoDetect: (NotRequired - Default true)
    #   [true]
    #     Joins that can be inner-join on condition-bean are auto-detected
    #     for performance tuning. (DBFlute uses NotNull constraint info)
    #
    #   [false]
    #     Non.
    #
    ; isInnerJoinAutoDetect = true
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isTableDispNameUpperCase: (NotRequired - Default false)
    #   [true]
    #     Table names for display, e.g. on documents,
    #     are forcedly treated as upper case.
    #
    #   [false]
    #     Non.
    #
    ; isTableDispNameUpperCase = true
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isTableSqlNameUpperCase: (NotRequired - Default false)
    #   [true]
    #     Table names on SQL executed by condition-bean or behavior
    #     are forcedly treated as upper case. (except outside-SQL)
    #
    #   [false]
    #     Non.
    #
    ; isTableSqlNameUpperCase = true
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isColumnSqlNameUpperCase: (NotRequired - Default false)
    #   [true]
    #     Column names on SQL executed by condition-bean or behavior
    #     are forcedly treated as upper case. (except outside-SQL)
    #
    #   [false]
    #     Non.
    #
    #; isColumnSqlNameUpperCase = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isMakeDeprecated: (NotRequired - Default false)
    #   [true]
    #     Make deprecated method and class and so on...
    #     *You should specify this property 'false'!
    #
    #   [false]
    #     Non.
    #
    ; isMakeDeprecated = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isMakeRecentlyDeprecated: (NotRequired - Default 'true')
    #   [true]
    #     Make RECENTLY deprecated method and class and so on...
    #     *You should specify this property 'false'!
    #
    #   [false]
    #     Non.
    #
    ; isMakeRecentlyDeprecated = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o extendedDBFluteInitializerClass: (NotRequired - Default '')
    #  If you want to extend the embedded DBFlute initializer,
    #  specify the class name of your original initializer
    #  that extends the embedded one.
    #  *Basically for fixed DBFluteConfig settings
    #
    # @JavaOnly
    ; extendedDBFluteInitializerClass = org.docksidestage.mysql.dbflute.nogen.ExtendedDBFluteInitializer
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o extendedImplementedInvokerAssistantClass: (NotRequired - Default '')
    #  If you want to extend the embedded invoker assistant,
    #  specify the class name of your original invoker assistant
    #  that extends the embedded one.
    #  *Basically you SHOULD NOT specify this property!
    #
    # @JavaOnly
    ; extendedImplementedInvokerAssistantClass = org.docksidestage.mysql.dbflute.nogen.ExtendedInvokerAssistant
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o extendedImplementedCommonColumnAutoSetupperClass: (NotRequired - Default '')
    #  If you want to extend the embedded common column auto setupper,
    #  specify the class name of your original common column auto setupper
    #  that extends the embedded one.
    #  *Basically you SHOULD NOT specify this property!
    #
    # @JavaOnly
    #; extendedImplementedCommonColumnAutoSetupperClass = com.example.ExtendedImplementedCommonColumnAutoSetupper
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o extendedS2DaoSettingClass: (NotRequired - Default '')
    #  If you want to extend the embedded S2Dao setting,
    #  specify the class name of your original S2Dao setting
    #  that extends the embedded one.
    #  *Basically you SHOULD NOT specify this property!
    #
    # @CSharpOnly
    #; extendedS2DaoSettingClass = Com.Example.ExtendedS2DaoSetting
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o shortCharHandlingMode: (NotRequired - Default 'NONE')
    #  If the parameter of condition-bean or parameter-bean has short size,
    #   NONE - Do nothing. (default)
    #   EXCEPTION - It throws an exception.
    #   RFILL - It fills the parameter by right spaces.
    #   LFILL - It fills the parameter by left spaces.
    #
    ; shortCharHandlingMode = NONE
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o quoteTableNameList: (NotRequired - Default list:{})
    #  The list of table DB names that need to be quoted.
    #  Specified tables is quoted on auto-generated SQL.
    #
    ; quoteTableNameList = list:{MEMBER ; WHITE_QUOTED ; WHITE_QUOTED_REF}
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o quoteColumnNameList: (NotRequired - Default list:{})
    #  The list of column DB names that need to be quoted.
    #  Specified columns is quoted on auto-generated SQL.
    #
    ; quoteColumnNameList = list:{
        # DB reservation
        ; SELECT ; FROM ; WHERE ; ORDER
        # both Program and DB reservation
        ; CASE ; DEFAULT ; RETURN ; DOUBLE; FLOAT
    }
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o relationalNullObjectMap: (NotRequired - Default map:{})
    #  You can get a null object when the relation is null.
    #
    ; relationalNullObjectMap = map:{
        ; providerPackage = $$packageBase$$.nogen.cache
        ; foreignMap = map:{
            ; MEMBER_STATUS = CachedMemberStatus.get(this, "$$foreignPropertyName$$", $$PrimaryKey$$)
            ; MEMBER_SECURITY = CachedMemberSecurity.get($$PrimaryKey$$)
        }
    }
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o cursorSelectFetchSize: (NotRequired - Default null)
    #  The fetch size of JDBC parameter for cursor select.
    #  For example, specify Integer.MIN_VALUE to enable fetch of MySQL.
    #
    #; cursorSelectFetchSize = Integer.MIN_VALUE
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o refreshMap: (NotRequired - Default map:{projectName=$$AutoDetect$$ ; requestUrl=http://localhost:8386/})
    #  If you use synchronizer and specify this property, no need to refresh(F5) your eclipse project.
    #  The projectName can be set plural names by slash '/'. e.g. sea/land
    #
    #; refreshMap = map:{
    #    ; projectName = $$AutoDetect$$
    #    ; requestUrl = http://localhost:8386/
    #}
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o optimisticLockMap: (NotRequired - Default map:{})
    #  The definition for optimistic lock of DBFlute.
    #
    #; optimisticLockMap = map:{
    #    # o updateDateFieldName: (NotRequired - Default '')
    #    ; updateDateFieldName = UPDATE_DATE
    #
    #    # o versionNoFieldName: (NotRequired - Default 'VERSION_NO')
    #    #  The column name of version no for optimistic lock.
    #    #  Basically you don't need this if your tables have the column 'VERSION_NO'.
    #    #  because the default value is 'VERSION_NO'.
    #    ; versionNoFieldName = VERSION_NO
    #}
    # - - - - - - - - - -/
}
# ----------------/