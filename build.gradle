
// =======================================================================================
//                                                                           Core Settings
//                                                                           =============
buildscript {
    repositories {
        jcenter() // http://jcenter.bintray.com/
    }
}

plugins {
    id 'com.moowork.gulp' version '0.11'
    id 'com.github.hierynomus.license' version '0.13.1'
}

apply plugin: 'application'
apply plugin: 'war'
apply plugin: 'project-report'


// =======================================================================================
//                                                                              Basic Info
//                                                                              ==========
group = 'org.dbflute'
version = '0.2.1'

ext {
    encoding = 'UTF-8'

    versions =
        [
            // Basic Resource
            jdk : '1.8',
            gradle : '4.2',
            node : '8.7.0',

            // Main Framework
            dbflute : '1.1.8',
            h2 : '1.4.197',
            lastaflute : '1.0.8',

            // Partner Library
            slf4j : '1.7.25',
            logback : '1.2.3',
            jettyboot : '0.4.9',
            lastadoc : '0.3.2',
            swaggerui : '2.2.10',

            // GoodNeighbor Library
            commonslang : '3.7',
            commonsio : '2.6',

            // Testing
            junit : '4.12',
            utflute : '0.8.5'
        ]
}


// =======================================================================================
//                                                                                 Plug-in
//                                                                                 =======
// TODO jflute intro: what is refreshResource? (Eclipse Synchronizer?)
task refreshResource {
}

task refreshResourceAfter {
}

// include plugin's gradle settings (using application settings, e.g. versions)
// _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
// if ./gradlew eclipse => module.js:529 throw err; Error: Cannot find module 'internal/errors'
// you can avoid this: by jflute (2017/12/23)
//  e.g. fileTree(dir: 'gradle/gradlePlugin', includes: ['common.gradle', 'commonJava.gradle', 'eclipse.gradle']).each { apply from: it }
// _/_/_/_/_/_/_/_/_/_/
fileTree(dir: 'gradle/gradlePlugin', includes: ['*.gradle']).each { apply from: it }


// =======================================================================================
//                                                                                 Library
//                                                                                 =======
repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/groups/public'
    }
}

dependencies {
    // Main Framework
    compile "org.dbflute:dbflute-runtime:${versions.dbflute}"
    runtime "com.h2database:h2:${versions.h2}"
    compile "org.lastaflute:lastaflute:${versions.lastaflute}"

    // Partner Library
    compile "javax.transaction:javax.transaction-api:1.2"
    compile "org.slf4j:slf4j-api:${versions.slf4j}"
    runtime "ch.qos.logback:logback-classic:${versions.logback}"
    compile "javax.servlet:javax.servlet-api:3.1.0"
    compile "org.dbflute.jetty:jetty-boot:${versions.jettyboot}"
    compile "org.lastaflute.doc:lasta-doc:${versions.lastadoc}"
    runtime "org.webjars:swagger-ui:${versions.swaggerui}"

    // GoodNeighbor Library
    compile "org.apache.commons:commons-lang3:${versions.commonslang}"
    compile "commons-io:commons-io:${versions.commonsio}"

    // Testing
    testCompile "junit:junit:${versions.junit}"
    testCompile "org.dbflute.utflute:utflute-lastaflute:${versions.utflute}"
}


// =======================================================================================
//                                                                               Packaging
//                                                                               =========
mainClassName = 'org.dbflute.intro.IntroBoot'

war {
    def embeddedArtifactList = ['javax.servlet-api', 'jetty-boot', 'jetty-all']
    configurations.compile.collect { file ->
        if (embeddedArtifactList.any {file.getName().startsWith(it)}) {
            from(file.isDirectory() ? file : zipTree(file)) {
                exclude 'META-INF/*NOTICE*'
                exclude 'META-INF/*LICENSE*'
                exclude 'META-INF/*DEPENDENCIES*'
                exclude 'META-INF/maven/**'
            }
        }
    }
    rootSpec.exclude(embeddedArtifactList.collect {"**/${it}-*.jar"})
    from fileTree(dir: sourceSets.main.output.classesDir, includes: ["${mainClassName.replace('.', '/')}.class"])
    from fileTree(dir: file('dist'), include: '**/**')

    includeEmptyDirs = false

    version = ''
    extension = 'jar'

    def scmBranch = 'unknown'
    def scmRevision = 'unknown'

    try {
        scmBranch = 'git branch --contains'.execute().text.trim() - '* '
        scmRevision = 'git rev-parse HEAD'.execute().text.trim()
    } catch (Exception ignored) {
    }

    manifest {
        attributes 'Implementation-Title': project.name
        attributes 'Implementation-Version': project.version
        attributes 'SCM-Branch': scmBranch
        attributes 'SCM-Revision': scmRevision
        attributes 'Build-Timestamp': new java.text.SimpleDateFormat('yyyy/MM/dd HH:mm:ss.SSS').format(new Date())
        attributes 'Jenkins-Build-Number': System.getenv()['BUILD_NUMBER'] ?: ''
        attributes 'Main-Class' : mainClassName
    }

    // license
    from('LICENSE') {
        into 'META-INF'
        rename('LICENSE', 'LICENSE.txt')
    }
    from('etc/dist-license') {
        into 'META-INF/dist-license'
    }
}


// =======================================================================================
//                                                                                 License
//                                                                                 =======
license {
    header file('LICENSE_HEADER')
    strictCheck true
    include "**/*.java"
    mapping {
        java='SLASHSTAR_STYLE'
    }
}


// =======================================================================================
//                                                                                 Refresh
//                                                                                 =======
task refresh(dependsOn: ['refreshResource', 'refreshResourceAfter', 'eclipse'])
tasks['refreshResourceAfter'].dependsOn(['refreshResource'])
if (tasks.findByName('eclipseClasspath')) {
    tasks['eclipseClasspath'].dependsOn(['refreshResource'])
}
