##
## Copyright 2017-2018 the original author or authors.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
#set ($rule = $scriptEngine.get('remoteApiRule'))
#set ($typeMap = {})
#set ($put = $typeMap.putAll($scriptEngine.invokeMethod($rule, 'typeMap')))
#set ($definitionMap = {})
#set ($definitionMap = $data.definitionMap)
${manager.allClassCopyright}package ${data.package};
#set ($importList = [])
#set($added = $importList.add('org.lastaflute.core.util.Lato'))
#if ($data.in == 'xml')
#set($added = $importList.add('javax.xml.bind.annotation.XmlElement'))
#end
#foreach($propertyEntry in $data.properties.entrySet())
#set ($property = $propertyEntry.value)
#if (${property.required})
#if ($property.type == 'array')
#set($added = $importList.add('javax.validation.constraints.NotNull'))
#else
#set($added = $importList.add('org.lastaflute.web.validation.Required'))
#end
#end
#set ($tempDefinitionMap = {})
#set ($put = $tempDefinitionMap.putAll($definitionMap))
#analyzeImports($importList, $tempDefinitionMap, $property)
#end
#generateImports($importList, $data.package, $scriptEngine.invokeMethod($rule, 'importOrderList'))

/**
 * The bean class as ${data.beanPurposeType} for remote API of ${data.remoteApiExp}.
 * @author FreeGen
 */
public class ${data.className}#if ($data.extendsClass && $data.extendsClass != '') extends $data.extendsClass#end#if ($data.implementsClasses && $data.implementsClasses != '') implements $data.implementsClasses#end {
#set($nestTypeFullNameList = [])
#foreach($propertyEntry in $data.properties.entrySet())
#set($nestList = [])
#generateProperty($data.className, $propertyEntry)
#set($nestList = [])
#end
#set($nestTypeFullNameList = [])

    @Override
    public String toString() {
        return Lato.string(this);
    }
}
## analyze imports.
## @param class class (NotNull)
## @param propertyEntry propertyEntry (NotNull)
## _/_/_/_/_/_/_/_/_/_/
#macro(analyzeImports, $importList, $definitionMap, $property)
#set ($nestType = '')
#if ($property.items && $property.items['$ref'])
#set ($nestType = $generator.getClass().forName('java.net.URLDecoder').decode($property.items['$ref'].replace('#/definitions/', ''), 'UTF-8'))
#elseif ($property.items && $property.items.allOf[0]['$ref'])
#set ($nestType = $generator.getClass().forName('java.net.URLDecoder').decode($property.items.allOf[0]['$ref'].replace('#/definitions/', ''), 'UTF-8'))
#elseif ($property['$ref'])
#set ($nestType = $generator.getClass().forName('java.net.URLDecoder').decode($property['$ref'].replace('#/definitions/', ''), 'UTF-8'))
#elseif ($property.allOf[0]['$ref'])
#set ($nestType = $generator.getClass().forName('java.net.URLDecoder').decode($property.allOf[0]['$ref'].replace('#/definitions/', ''), 'UTF-8'))
#end
#if ($nestType && $nestType != '')
#foreach($nestPropertyEntry in $definitionMap[$nestType].properties.entrySet())
#set ($nestPropertyEntry.value.required = $definitionMap[$nestType].required.contains($nestPropertyEntry.key))
#set ($nestProperty = $nestPropertyEntry.value)
#if (${nestProperty.required})
#if ($nestProperty.type == 'array')
#set($added = $importList.add('javax.validation.constraints.NotNull'))
#else
#set($added = $importList.add('org.lastaflute.web.validation.Required'))
#end
#end
#end
#if ($definitionMap.containsKey($nestType))
#set ($definition = $definitionMap[$nestType])
#set ($remove = $definitionMap.remove($nestType))
#foreach($nestPropertyEntry in $definition.properties.entrySet())
#analyzeImports($importList, $definitionMap, $nestPropertyEntry.value)
#end
#end
#end
#set ($nestType = '')
#end
## _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
## generate property.
## @param class class (NotNull)
## @param propertyEntry propertyEntry (NotNull)
## _/_/_/_/_/_/_/_/_/_/
#macro(generateProperty, $class, $propertyEntry)
#set ($fieldName = ${scriptEngine.invokeMethod($rule, 'fieldName', $data.api, $data, $propertyEntry.key)})
#set ($property = $propertyEntry.value)
## TODO p1us2er0 temporary for beanPropertyManualMappingDescription. (2017/10/10)
#set ($property.name = $fieldName)
#set ($fieldClass = '')
#set ($enumValueComment = '')
#set ($nestType = '')
#if ($property.enum)
#set ($enumValueComment = "(enumValue=$property.enum) ")
#elseif ($property.items.enum)
#set ($enumValueComment = "(enumValue=$property.items.enum) ")
#end

#if ($scriptEngine.invokeMethod($rule, 'beanPropertyManualMappingDescription', $data.api, $class, $property))
#generateIndent($nestList.size())/** The property of ${fieldName}. ${enumValueComment}($scriptEngine.invokeMethod($rule, 'beanPropertyManualMappingDescription', $data.api, $class, $property)) #if (!${property.required})(NullAllowed) #end*/
#elseif (${property.description})
#generateIndent($nestList.size())/** The property of ${fieldName}. ${enumValueComment}(${property.description}) #if (!${property.required})(NullAllowed) #end*/
#else
#generateIndent($nestList.size())/** The property of ${fieldName}. ${enumValueComment}#if (!${property.required})(NullAllowed) #end*/
#end
#if ($data.in == 'xml')
#generateIndent($nestList.size())@XmlElement(name = "$propertyEntry.key")
#end
#if (${property.required})
#if ($property.type == 'array')
#generateIndent($nestList.size())@NotNull
#else
#generateIndent($nestList.size())@Required
#end
#end
#if ($property.type == 'array')
#if ($scriptEngine.invokeMethod($rule, 'beanPropertyManualMappingClass', $data.api, $class, $property))
#set ($fieldClass = "${typeMap[$property.type]}<$scriptEngine.invokeMethod($rule, 'beanPropertyManualMappingClass', $data.api, $class, $property)>")
#elseif (${typeMap[$property.items.format]})
#set ($fieldClass = "${typeMap[$property.type]}<${typeMap[$property.items.format]}>")
#elseif (${typeMap[$property.items.type]})
#set ($fieldClass = "${typeMap[$property.type]}<${typeMap[$property.items.type]}>")
#elseif ($property.items['$ref'] || ($property.items && $property.items.allOf[0]['$ref']))
#if ($property.items['$ref'])
#set ($nestType = $generator.getClass().forName('java.net.URLDecoder').decode($property.items['$ref'].replace('#/definitions/', ''), 'UTF-8'))
#elseif ($property.items && $property.items.allOf[0]['$ref'])
#set ($nestType = $generator.getClass().forName('java.net.URLDecoder').decode($property.items.allOf[0]['$ref'].replace('#/definitions/', ''), 'UTF-8'))
#end
#adjustType($nestType)
#set ($fieldClass = "${typeMap[$property.type]}<$adjustType>")
#generateIndent($nestList.size())@javax.validation.Valid
#end
#elseif ($scriptEngine.invokeMethod($rule, 'beanPropertyManualMappingClass', $data.api, $class, $property))
#set ($fieldClass = $scriptEngine.invokeMethod($rule, 'beanPropertyManualMappingClass', $data.api, $class, $property))
#elseif (${typeMap[$property.format]})
#set ($fieldClass = ${typeMap[$property.format]})
#elseif (${typeMap[$property.type]})
#set ($fieldClass = ${typeMap[$property.type]})
#elseif ($property['$ref'] || $property.allOf[0]['$ref'])
#if ($property['$ref'])
#set ($nestType = $generator.getClass().forName('java.net.URLDecoder').decode($property['$ref'].replace('#/definitions/', ''), 'UTF-8'))
#elseif ($property.allOf[0]['$ref'])
#set ($nestType = $generator.getClass().forName('java.net.URLDecoder').decode($property.allOf[0]['$ref'].replace('#/definitions/', ''), 'UTF-8'))
#end
#adjustType($nestType)
#set ($fieldClass = $adjustType)
#generateIndent($nestList.size())@javax.validation.Valid
#end
#if ($fieldClass == '')
#set ($fieldClass = ${typeMap['']})
#end
#generateIndent($nestList.size())public $fieldClass $fieldName;
#generateNestType($nestType)
#end
## _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
## generate nest type.
## @param type type (NotNull)
## _/_/_/_/_/_/_/_/_/_/
#macro(generateNestType, $type)
#if ($type && $type != '' && !$nestList.contains($type) && !($nestTypeFullNameList.contains($type) || $nestTypeFullNameList.contains("$type.join('_', $nestList)_$type")))
#adjustType($type)

#generateIndent($nestList.size())/**
#generateIndent($nestList.size()) * The part class of ${adjustType}.
#generateIndent($nestList.size()) * @author FreeGen
#generateIndent($nestList.size()) */
#generateIndent($nestList.size())public static class $adjustType {
#set($added = $nestList.add($type))
#set($added = $nestTypeFullNameList.add("$type.join('_', $nestList)"))
#foreach($nestPropertyEntry in $definitionMap[$type].properties.entrySet())
#generateProperty($adjustType, $nestPropertyEntry)
#end
#set($i = $nestList.size() - 1)
#set($removed = $nestList.remove($i))
#generateIndent($nestList.size())}
#end
#end
## _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
## Adjust java type of e.g. property. e.g. java.util.List to List
## @param type The type of java type. (NotNull)
## @return adjustType The filtered expression of the type. (NotNull)
## _/_/_/_/_/_/_/_/_/_/
#macro(adjustType, $type)
#set ($adjustType = ${type})
#set ($index = ${adjustType.lastIndexOf('.')})
#if ($index != -1)
#set ($index = $index + 1)
#set ($adjustType = ${adjustType.substring($index)})
#end
#set ($adjustType = $adjustType.replaceAll("^.*\$", ''))
#set ($adjustType = $scriptEngine.invokeMethod($rule, 'nestClassName', $schema, $adjustType))
#end
