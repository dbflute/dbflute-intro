<main>
  <div class="ui text container">
    <h1>DBFlute Intro</h1>
    <div>
      <h2>DBFlute Client</h2>
      <input type="button" class="ui button primary" value="Create" onclick="{ goToClientCreate }"/>
    </div>

    <table class="ui table">
      <thead>
      <tr>
        <th is="i18n">LABEL_projectName</th>
        <th is="i18n">LABEL_databaseCode</th>
        <th is="i18n">LABEL_languageCode</th>
        <th is="i18n">LABEL_containerCode</th>
      </tr>
      </thead>
      <tbody class="list-group">
      <tr each="{ client in state.clientList }">
        <td>
          <a onclick="{ goToClient.bind(this, client) }">{ client.projectName }</a>
        </td>
        <td>{ client.databaseCode }</td>
        <td>{ client.languageCode }</td>
        <td>{ client.containerCode }</td>
      </tr>
      </tbody>
    </table>

    <h2>DBFlute Engine</h2>
    <button type="button" class="ui button primary" onclick="{ showDownloadModal }">
      <span class="glyphicon glyphicon-download-alt" aria-hidden="true"></span>Download
    </button>

    <table class="ui table">
      <thead>
      <tr>
        <th is="i18n">LABEL_engineVersion</th>
        <th></th>
      </tr>
      </thead>
      <tbody>
      <tr each="{ version in state.versions }">
        <td>{ version }</td>
        <td class="right aligned">
          <input type="button" class="ui negative button" value="Remove" onclick="{ removeEngine.bind(this,version) }"/>
        </td>
      </tr>
      </tbody>
    </table>
    <h3>
      <small class="text-info">System Info</small>
    </h3>
    <div class="ui list">
      <div class="item" each="{ manifest in state.manifest }">
        <small>{ manifest[0] } = { manifest[1] }</small>
      </div>
    </div>
  </div>

  <su-modal modal="{ state.downloadModal }" show="{ state.downloadModal.show }" ondownload-engine="{ onClickDownload }" ref="downloadModal">
    <div class="description">
      The latest version is { state.latestVersion.latestReleaseVersion } now.
      <form class="ui form">
        <div class="required field">
          <label>Version</label>
          <input type="text" ref="version" value="{ state.latestVersion.latestReleaseVersion }">
        </div>
      </form>
    </div>
  </su-modal>

  <su-modal modal="{ state.processModal }" show="{ state.processModal.show }" ref="processModal">
    <div class="description">
      Downloading...
    </div>
  </su-modal>

  <style>
    table + h2,
    table + h3 {
      margin-top: 3rem;
    }
  </style>

  <script>
    import { pages } from '../app-router'
    import i18n from '../common/i18n.riot'
    import { api } from '../common/ApiClient'

    export default {
      components: {
        i18n
      },
      state: {
        manifest: [], // intro manifest
        versions: [], // engine versions
        configuration: {}, // intro configuration
        clientList: [], // existing clients
        latestVersion: {}, // latest engin verion
        downloadModal: {
          header: 'DBFlute Engine Download',
          closable: true,
          buttons: [
            {
              text: 'Download',
              action: 'download-engine'
            }
          ],
          show: false
        },
        processModal: {
          closable: false,
          show: false
        }
      },
      // ===================================================================================
      //                                                                          Initialize
      //                                                                          ==========
      onMounted() {
        this.introManifest()
        this.engineVersions()
        this.latestVersion()
        this.configuration()
        this.prepareClientList()
      },
      // ===================================================================================
      //                                                                          Basic Data
      //                                                                          ==========
      introManifest() {
        api.manifest().then((json) => {
          this.update({
            manifest: [
              ['Implementation-Version', json['Implementation-Version']],
              ['Build-Timestamp', json['Build-Timestamp']]
            ]
          })
        })
      },
      engineVersions() {
        api.engineVersions().then((json) => {
          this.update({ versions: json })
        })
      },
      latestVersion() {
        api.findEngineLatest().then((json) => {
          this.update({ latestVersion: json })
        })
      },
      configuration() {
        api.configuration().then((json) => {
          this.update({ configuration: json })
        })
      },
      // ===================================================================================
      //                                                                     Client Handling
      //                                                                     ===============
      prepareClientList() {
        api.clientList().then((json) => this.update({ clientList: json }))
      },
      goToClient(client) {
        pages.client.open(client.projectName, 'execute', 'documents')
      },
      goToClientCreate() {
        pages.create.open()
      },
      // ===================================================================================
      //                                                                              Engine
      //                                                                              ======
      onClickDownload() {
        this.state.processModal.show = true
        this.update()
        const version = this.state.latestVersion.latestReleaseVersion
        api.downloadEngine({ version }).finally(() => {
          this.state.processModal.show = false
          this.engineVersions()
        })
      },
      showDownloadModal() {
        this.state.downloadModal.show = true
        this.update()
      },
      removeEngine(version) {
        api.removeEngine({ version }).finally(() => {
          this.engineVersions()
        })
      }
    }
  </script>
</main>
