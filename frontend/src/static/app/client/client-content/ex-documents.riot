<ex-documents>
   <!-- DBFlute の Document 機能をGUIで操作できるようにするタグ (written at 2022/03/03)
   機能:
    o SchemaHTML が存在する場合、リンクが表示されており、そこから開くことができる
    o HistoryHTML が存在する場合、リンクが表示されており、そこから開くことができる
    o documentMap.dfprop を編集することができる
    o DBFlute Engine に Gererate Task を実行させることができる
    o Generate Task の実行結果を確認することができる

   作りの特徴:
    o DBFlute Enginge が提供するドキュメント関連の機能のうち、DBFlute Introで操作可能なものは、全てこの tag の中に記述されている
    o 「window.open」によって、SchemaHTML, HistoryHTML を開くようになっている
    o Modal で documentMap.dfprop を編集させる
    o Generate Task の実行中は、別の操作を抑制するための Modal を表示している
    o Generate Task の実行後は、結果を Modal で表示し、ログを改めて参照できるようにしている
    o Generate Task は管理しているデータベースに変更を加えないので、実行前の確認は行わない
   -->
  <div class="ui container">
    <h2>Documents</h2>
    <!-- 各HTMLのドキュメントリンク -->
    <div class="ui list">
<!--      <div show="{ state.client.hasSchemaHtml }" class="item doc-schemahtml-link"><a onclick="{ openSchemaHTML }">Open your SchemaHTML</a></div>-->
<!--      <div show="{ state.client.hasHistoryHtml }" class="item doc-historyhtml-link"><a onclick="{ openHistoryHTML }">Open your HistoryHTML</a></div>-->
    </div>

    <!-- documentMap.dfprop の編集を行う Modal を表示するボタン -->
    <button class="ui positive button" onclick="{ showDocumentSettingModal }">Edit document settings</button>

    <!-- generateTask を実行するボタン -->
    <button class="ui primary button" onclick="{ generateTask }">Generate documents ( jdbc/doc task )</button>

    <!-- "Documents" ってそもそもなんやねん？の説明 -->
    <div class="ui info message">
      <div class="header">What is "Documents" here?</div>
      <p>
        e.g. <a href="http://dbflute.seasar.org/ja/manual/function/generator/task/doc/schemahtml.html" target="_blank">SchemaHTML</a>, <a href="http://dbflute.seasar.org/ja/manual/function/generator/task/doc/historyhtml.html" target="_blank">HistoryHTML</a>,
        generated by <a href="http://dbflute.seasar.org/ja/manual/function/generator/task/doc/index.html" target="_blank">Doc task</a>.
      </p>
    </div>

    <!-- 最後に Generate Task を実行したときのログを表示するところ -->
    <div class="latest-result">
      <latest-result></latest-result>
    </div>
  </div>

  <!-- documentMap.dfprop を編集するための Modal -->
<!--  <su-modal modal="{ documentSettingModal }" class="large" ref="documentSettingModal">-->
<!--    &lt;!&ndash; documentMap.dfprop を編集するための form の実態 &ndash;&gt;-->
<!--    <form class="ui form">-->
<!--      <div class="field">-->
<!--        <label>Alias delimiter in DB comment <span class="frm">(aliasDelimiterInDbComment)</span></label>-->
<!--        <input type="text" ref="aliasDelimiterInDbComment" placeholder="e.g. :"-->
<!--               value="{ opts.modal.documentSetting.aliasDelimiterInDbComment }">-->
<!--      </div>-->
<!--      <div class="field">-->
<!--        <di class="ui checkbox">-->
<!--          <input type="checkbox" ref="upperCaseBasic" checked="{ opts.modal.documentSetting.upperCaseBasic }">-->
<!--          <label>Upper case basis <span class="frm">(isTableDispNameUpperCase, isTableSqlNameUpperCase, isColumnSqlNameUpperCase)</span></label>-->
<!--        </di>-->
<!--      </div>-->
<!--      <div class="field">-->
<!--        <div class="ui checkbox">-->
<!--          <input type="checkbox" ref="dbCommentOnAliasBasis" checked="{ opts.modal.documentSetting.dbCommentOnAliasBasis }">-->
<!--          <label>DB comment on alias basis <span class="frm">(isDbCommentOnAliasBasis)</span></label>-->
<!--        </div>-->
<!--      </div>-->
<!--      <div class="field">-->
<!--        <div class="ui checkbox">-->
<!--          <input type="checkbox" ref="checkColumnDefOrderDiff" checked="{ opts.modal.documentSetting.checkColumnDefOrderDiff }">-->
<!--          <label>Check column definition order difference <span class="frm">(isCheckColumnDefOrderDiff)</span></label>-->
<!--        </div>-->
<!--      </div>-->
<!--      <div class="field">-->
<!--        <div class="ui checkbox">-->
<!--          <input type="checkbox" ref="checkDbCommentDiff" checked="{ opts.modal.documentSetting.checkDbCommentDiff }">-->
<!--          <label>Check DB comment difference <span class="frm">(isCheckDbCommentDiff)</span></label>-->
<!--        </div>-->
<!--      </div>-->
<!--      <div class="field">-->
<!--        <div class="ui checkbox">-->
<!--          <input type="checkbox" ref="checkProcedureDiff" checked="{ opts.modal.documentSetting.checkProcedureDiff }">-->
<!--          <label>Check procedure difference <span class="frm">(isCheckProcedureDiff)</span></label>-->
<!--        </div>-->
<!--      </div>-->
<!--    </form>-->
<!--  </su-modal>-->

<!--  &lt;!&ndash; Generate Task 実行時に他の操作を抑制するための Modal &ndash;&gt;-->
<!--  <su-modal modal="{ generateModal }" class="large" ref="generateModal">-->
<!--    <div class="description">-->
<!--      Generating...-->
<!--    </div>-->
<!--  </su-modal>-->

<!--  &lt;!&ndash; Generate Task 実行結果を表示するための Modal &ndash;&gt;-->
<!--  <result-modal ref="resultModal"></result-modal>-->

  <style>
    .latest-result {
      margin-top: 1em;
    }
  </style>

  <script>
    export default {}
    // let riot = require('riot')
    // import _ApiFactory from '../../common/factory/ApiFactory'
    // import _DbfluteTask from '../../common/DbfluteTask'
    //
    // const ApiFactory = new _ApiFactory()
    // const DbfluteTask = new _DbfluteTask()
    // let self = this
    //
    // self.client = opts.client
    //
    // // ===================================================================================
    // //                                                                          Initialize
    // //                                                                          ==========
    // /**
    //  * マウント時の処理
    //  */
    // this.on('mount', () => {
    //   self.prepareCurrentProject()
    //   self.prepareComponents()
    //   self.registerModalEvent()
    // })
    //
    // /**
    //  * DBFluteクライアントの基本設定情報を準備する。
    //  */
    // this.prepareCurrentProject = () => {
    //   ApiFactory.document(self.opts.projectName).then((response) => {
    //     self.documentSettingModal.documentSetting = response
    //     self.update()
    //   })
    // }
    //
    // /**
    //  * その他画面コンポーネントを準備する。(実行結果の領域など)
    //  */
    // this.prepareComponents = () => {
    //   // self.latestResultがlatest-resultタグと関連付いてマウントされる
    //   // #thinking riot.mount()後の[0]はなんだ？mountってArrayで戻ってくるの？ by cabos
    //   self.latestResult = riot.mount('latest-result', { projectName: self.opts.projectName, task: 'doc' })[0]
    // }
    //
    // /**
    //  * documentMap.dfprop が編集できる Modal の OK ボタンが押されたときの挙動を登録する
    //  * 登録される挙動は「Modal 内にある form の input から value 等を抜き出し、バックエンドのAPIにリクエストを送信する」というもの
    //  */
    // this.registerModalEvent = () => {
    //   this.refs.documentSettingModal.on('editDocumentSettings', () => {
    //     const documentStringModalRefs = self.refs.documentSettingModal.refs
    //     const documentSetting = {
    //       aliasDelimiterInDbComment: documentStringModalRefs.aliasDelimiterInDbComment.value,
    //       upperCaseBasic: documentStringModalRefs.upperCaseBasic.checked,
    //       dbCommentOnAliasBasis: documentStringModalRefs.dbCommentOnAliasBasis.checked,
    //       checkColumnDefOrderDiff: documentStringModalRefs.checkColumnDefOrderDiff.checked,
    //       checkDbCommentDiff: documentStringModalRefs.checkDbCommentDiff.checked,
    //       checkProcedureDiff: documentStringModalRefs.checkProcedureDiff.checked
    //     }
    //     ApiFactory.editDocument(self.opts.projectName, documentSetting)
    //   })
    // }
    //
    // // ===================================================================================
    // //                                                                               Modal
    // //                                                                               =====
    // // -----------------------------------------------------
    // //                                            Definition
    // //                                            ----------
    // /**
    //  * documentMap.dfprop を編集するための Modal 初期設定
    //  */
    // this.documentSettingModal = {
    //   header: 'Document Settings (documentMap.dfprop, littleAdjustmentMap.dfprop)',
    //   closable: true,
    //   buttons: [
    //     {
    //       text: 'OK',
    //       action: 'editDocumentSettings'
    //     }
    //   ],
    //   documentSetting: {}
    // }
    //
    // /**
    //  * DBFlute が Generate Taks を実行している間に見せる Modal の初期設定
    //  */
    // this.generateModal = {
    //   closable: false
    // }
    //
    // // -----------------------------------------------------
    // //                                                  Show
    // //                                                  ----
    // /**
    //  * documentMap.dfprop を編集するための Modal を表示する
    //  * ユーザが「Edit document settings」というボタンをクリックときに呼び出される
    //  */
    // this.showDocumentSettingModal = () => {
    //   self.refs.documentSettingModal.show()
    // }
    //
    // // ===================================================================================
    // //                                                                       Open Document
    // //                                                                       =============
    // /**
    //  * schemahtml のリンクを開く
    //  * 「Open your SchemaHTML」というリンクをクリックすると呼び出される
    //  * ちなみに、「global.ffetch.baseUrl」の中身は空文字（baseUrlをプロジェクト全体で統一的に設定できるっぽい）
    //  */
    // this.openSchemaHTML = () => {
    //   window.open(global.ffetch.baseUrl + 'api/document/' + self.opts.projectName + '/schemahtml/')
    // }
    //
    // /**
    //  * historyhtml のリンクを開く
    //  * 「Open your historyHTML」というリンクをクリックすると呼び出される
    //  * ちなみに、「global.ffetch.baseUrl」の中身は空文字（baseUrlをプロジェクト全体で統一的に設定できるっぽい）
    //  */
    // this.openHistoryHTML = () => {
    //   window.open(global.ffetch.baseUrl + 'api/document/' + self.opts.projectName + '/historyhtml/')
    // }
    //
    // // ===================================================================================
    // //                                                                        Execute Task
    // //                                                                        ============
    // /**
    //  * DBFlute Engine に Generate Taks を実行させるためのリクエストをバックエンドに送信する
    //  * Generate Task の処理中、他の操作を抑制するための Modal を表示させている
    //  * Generate Task の処理後、Modal を処理結果のもとに差し替え、最終実行ログを画面に表示する
    //  * 「Generate documents ( jdbc/doc task )」というボタンをクリックすると呼び出される
    //  */
    // this.generateTask = () => {
    //   // 操作を抑制する Modal を表示する
    //   self.refs.generateModal.show()
    //   DbfluteTask.task('doc', self.opts.projectName, (message) => {
    //     // タスクが完了したら、結果を Modal で表示する
    //     self.refs.resultModal.show(message)
    //   }).finally(() => {
    //     // schemaHTML, historyHTML が存在するかどうかの情報をサーバから取得する
    //     // 将来的には、存在するかどうかの情報を Propbase とは別のAPIに切り出すリファクタリングを行う予定
    //     // https://github.com/dbflute/dbflute-intro/issues/260
    //     ApiFactory.clientPropbase(self.opts.projectName).then((response) => {
    //       self.client = response
    //       self.update()
    //     })
    //     // 操作を抑制する Modal を隠す
    //     self.refs.generateModal.hide()
    //     self.latestResult.updateLatestResult()
    //   })
    // }
  </script>
</ex-documents>
