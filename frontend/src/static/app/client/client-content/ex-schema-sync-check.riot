<ex-schema-sync-check>
  <div class="ui container">
    <h2>Schema Sync Check</h2>
    <p show="{ canCheckSchemaSetting() }">
      for { state.syncSetting.url }<span show="{ state.syncSetting.schema != null }">, { state.syncSetting.schema }</span>, { state.syncSetting.user }
    </p>
    <div class="ui list">
      <div show="{ state.client.hasSyncCheckResultHtml }" class="item"><a onclick="{ openSyncCheckResultHTML }">Open your SchemaSyncCheck result (HTML)</a></div>
    </div>
    <button class="ui positive button" onclick="{ showSyncSettingModal }">Edit check settings</button>
    <button show="{ canCheckSchemaSetting() }" class="ui primary button" onclick="{ schemaSyncCheckTask }">
      Execute SchemaSyncCheck
    </button>
    <div class="ui info message">
      <div class="header">What is <a href="http://dbflute.seasar.org/ja/manual/function/generator/task/doc/schemasynccheck.html" target="_blank">"SchemaSyncCheck"?</a></div>
      <p>A checking tool for differences between the two schemas.</p>
    </div>
    <div class="latest-result">
      <latest-result></latest-result>
    </div>
  </div>

  <su-modal modal="{ syncSettingModal }" class="large" ref="syncSettingModal">
    <form class="ui form">
      <div class="required field">
        <label>URL</label>
        <input type="url" ref="url" placeholder="jdbc:mysql://localhost:3306/examplesyncdb" value="{ opts.modal.syncSetting.url }">
      </div>
      <div class="field">
        <label>Schema</label>
        <input type="text" ref="schema" placeholder="EXAMPLESYNCDB" value="{ opts.modal.syncSetting.schema }">
      </div>
      <div class="required field">
        <label>User</label>
        <input type="text" ref="user" placeholder="examplesyncdb" value="{ opts.modal.syncSetting.user }">
      </div>
      <div class="field">
        <label>Password</label>
        <input type="text" ref="password" placeholder="" value="{ opts.modal.syncSetting.password }">
      </div>
      <div class="field">
        <div class="ui checkbox">
          <input type="checkbox" ref="isSuppressCraftDiff" checked="{ opts.modal.syncSetting.isSuppressCraftDiff }">
          <label>Suppress Craft Diff</label>
        </div>
      </div>
    </form>
  </su-modal>

  <su-modal modal="{ checkModal }" class="large" ref="checkModal">
    <div class="description">
      Checking...
    </div>
  </su-modal>

  <result-modal ref="resultModal"></result-modal>

  <style>
    .latest-result {
      margin-top: 1em;
    }
  </style>

  <script>
    // let riot = require('riot')
    // import _ApiFactory from '../../common/factory/ApiFactory.js'
    // import _DbfluteTask from '../../common/DbfluteTask'
    //
    // const ApiFactory = new _ApiFactory()
    // const DbfluteTask = new _DbfluteTask()
    //
    // const self = this
    //
    // self.props = {
    //   projectName: self.opts.projectName,
    //   client: self.opts.client
    // }
    //
    // self.state = {
    //   client: self.props.client,
    //   syncSetting: {}
    // }
    //
    // self.checkModal = {
    //   header: 'SchemaPolicyCheck',
    //   closable: false
    // }
    //
    // // ===================================================================================
    // //                                                                          Initialize
    // //                                                                          ==========
    // this.on('mount', () => {
    //   self.initSyncSchemaSetting()
    //   self.prepareComponents()
    //   self.registerModalEvent()
    // })
    //
    // this.initSyncSchemaSetting = () => {
    //   ApiFactory.syncSchema(self.props.projectName).then((response) => {
    //     self.syncSettingModal.syncSetting = response
    //     self.state.syncSetting = response
    //     self.update()
    //   })
    // }
    //
    // this.prepareComponents = () => {
    //   self.latestResult = riot.mount('latest-result', { projectName: self.props.projectName, task: 'schemaSyncCheck' })[0]
    // }
    //
    // this.registerModalEvent = () => {
    //   this.refs.syncSettingModal.on('editSyncSettings', () => {
    //     const syncSettingModalRefs = self.refs.syncSettingModal.refs
    //     const input = {
    //       url: syncSettingModalRefs.url.value,
    //       schema: syncSettingModalRefs.schema.value,
    //       user: syncSettingModalRefs.user.value,
    //       password: syncSettingModalRefs.password.value,
    //       isSuppressCraftDiff: syncSettingModalRefs.isSuppressCraftDiff.checked
    //     }
    //     ApiFactory.editSyncSchema(self.props.projectName, input).then(() => {
    //       self.refs.syncSettingModal.hide()
    //       self.initSyncSchemaSetting()
    //     })
    //   })
    // }
    //
    // // ===================================================================================
    // //                                                                       Open Document
    // //                                                                       =============
    // this.canCheckSchemaSetting = () => {
    //   return self.state.syncSetting.url != null && self.state.syncSetting.user != null
    // }
    //
    // this.openSyncCheckResultHTML = () => {
    //   window.open(global.ffetch.baseUrl + 'api/document/' + self.props.projectName + '/synccheckresulthtml/')
    // }
    //
    // // ===================================================================================
    // //                                                                               Modal
    // //                                                                               =====
    // // -----------------------------------------------------
    // //                                            Definition
    // //                                            ----------
    // this.syncSettingModal = {
    //   header: 'Schema Sync Check Settings',
    //   closable: true,
    //   buttons: [
    //     {
    //       text: 'OK',
    //       action: 'editSyncSettings',
    //       closable: false
    //     }
    //   ],
    //   syncSetting: {}
    // }
    //
    // // -----------------------------------------------------
    // //                                                  Show
    // //                                                  ----
    // this.showSyncSettingModal = () => {
    //   self.refs.syncSettingModal.show()
    // }
    //
    // // ===================================================================================
    // //                                                                        Execute Task
    // //                                                                        ============
    // this.schemaSyncCheckTask = () => {
    //   self.refs.checkModal.show()
    //   DbfluteTask.task('schemaSyncCheck', self.props.projectName, (message) => {
    //     // hasSyncCheckResultHtmlの最新状態を取得するため、clientをfetchし、componentに反映
    //     ApiFactory.clientPropbase(self.props.projectName).then((response) => {
    //       self.state.client = response
    //       self.update()
    //     })
    //     self.refs.resultModal.show(message)
    //   }).finally(() => {
    //     self.refs.checkModal.hide()
    //     self.latestResult.updateLatestResult()
    //   })
    // }
  </script>
</ex-schema-sync-check>
