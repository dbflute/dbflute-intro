{
  "swagger": "2.0",
  "info": {
    "title": "Intro",
    "description": "Intro. generated by lasta-meta-0.5.2.",
    "version": "1.0.0"
  },
  "schemes": [
    "http"
  ],
  "basePath": "//api/",
  "tags": [
    {
      "name": "client"
    },
    {
      "name": "dfprop"
    },
    {
      "name": "document"
    },
    {
      "name": "engine"
    },
    {
      "name": "intro"
    },
    {
      "name": "log"
    },
    {
      "name": "playsql"
    },
    {
      "name": "task"
    },
    {
      "name": "welcome"
    }
  ],
  "paths": {
    "/client/create": {
      "post": {
        "summary": "DBFluteクライアントをまるごと制御するAction。(作成、削除など) \u003cbr\u003e",
        "description": "DBFluteクライアントをまるごと制御するAction。(作成、削除など) \u003cbr\u003e",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ClientCreateBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/org.dbflute.intro.app.web.client.ClientCreateBody"
            }
          }
        ],
        "tags": [
          "client"
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "description": "client error"
          }
        }
      }
    },
    "/client/delete/{projectName}": {
      "get": {
        "summary": "DBFluteクライアントをまるごと制御するAction。(作成、削除など) \u003cbr\u003e",
        "description": "DBFluteクライアントをまるごと制御するAction。(作成、削除など) \u003cbr\u003e",
        "parameters": [
          {
            "name": "projectName",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "client"
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "description": "client error"
          }
        }
      }
    },
    "/client/list/": {
      "get": {
        "summary": "DBFluteクライアント一覧のためのAction。",
        "description": "DBFluteクライアント一覧のためのAction。",
        "parameters": [],
        "tags": [
          "client"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/java.util.List%3Corg.dbflute.intro.app.web.client.list.ClientRowResult%3E"
              }
            }
          },
          "400": {
            "description": "client error"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/client/propbase/{projectName}": {
      "get": {
        "summary": "DBFluteクライアントの基本プロパティを扱うAction。\u003cbr\u003e, @param projectName DBFluteクライアントのプロジェクト名 e.g. maihamadb (NotNull)",
        "description": "DBFluteクライアントの基本プロパティを扱うAction。\u003cbr\u003e, @param projectName DBFluteクライアントのプロジェクト名 e.g. maihamadb (NotNull)",
        "parameters": [
          {
            "name": "projectName",
            "description": "DBFluteクライアントのプロジェクト名",
            "type": "string",
            "in": "path",
            "default": "maihamadb",
            "required": true
          }
        ],
        "tags": [
          "client"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/org.dbflute.intro.app.web.client.propbase.ClientPropbaseResult"
            }
          },
          "400": {
            "description": "client error"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/dfprop/list/{projectName}": {
      "get": {
        "summary": "@author deco",
        "description": "@author deco",
        "parameters": [
          {
            "name": "projectName",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "dfprop"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/java.util.List%3Corg.dbflute.intro.app.web.dfprop.DfpropBean%3E"
              }
            }
          },
          "400": {
            "description": "client error"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/dfprop/update/{projectName}/{fileName}": {
      "post": {
        "summary": "@author deco",
        "description": "@author deco",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectName",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "fileName",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "DfpropUpdateBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/org.dbflute.intro.app.web.dfprop.DfpropUpdateBody"
            }
          }
        ],
        "tags": [
          "dfprop"
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "description": "client error"
          }
        }
      }
    },
    "/dfprop/document/{projectName}": {
      "get": {
        "summary": "@author prprmurakami",
        "description": "@author prprmurakami",
        "parameters": [
          {
            "name": "projectName",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "dfprop"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/org.dbflute.intro.app.web.dfprop.document.DfpropDocumentResult"
            }
          },
          "400": {
            "description": "client error"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/dfprop/document/edit/{projectName}": {
      "post": {
        "summary": "@author prprmurakami",
        "description": "@author prprmurakami",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectName",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "DfpropDocumentEditBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/org.dbflute.intro.app.web.dfprop.document.DfpropDocumentEditBody"
            }
          }
        ],
        "tags": [
          "dfprop"
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "description": "client error"
          }
        }
      }
    },
    "/dfprop/document/schemadiagram/{projectName}/{diagramName}": {
      "get": {
        "summary": "@author prprmurakami, schemaDiagramMapに設定された画像ファイルを取得します",
        "description": "@author prprmurakami, schemaDiagramMapに設定された画像ファイルを取得します",
        "parameters": [
          {
            "name": "projectName",
            "description": "The project name of DBFlute client.",
            "type": "string",
            "in": "path",
            "default": "trohamadb",
            "required": true
          },
          {
            "name": "diagramName",
            "description": "The diagramName name of schemaDiagramMap.",
            "type": "string",
            "in": "path",
            "default": "maihama_erd",
            "required": true
          }
        ],
        "tags": [
          "dfprop"
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        },
        "produces": [
          "application/octet-stream"
        ]
      }
    },
    "/dfprop/schemapolicy/{clientName}": {
      "get": {
        "summary": "@author prprmurakami",
        "description": "@author prprmurakami",
        "parameters": [
          {
            "name": "clientName",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "dfprop"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/org.dbflute.intro.app.web.dfprop.schemapolicy.DfpropSchemaPolicyResult"
            }
          },
          "400": {
            "description": "client error"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/dfprop/schemapolicy/edit/{clientName}": {
      "post": {
        "summary": "@author prprmurakami",
        "description": "@author prprmurakami",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "clientName",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "DfpropSchemaPolicyEditBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/org.dbflute.intro.app.web.dfprop.schemapolicy.DfpropSchemaPolicyEditBody"
            }
          }
        ],
        "tags": [
          "dfprop"
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "description": "client error"
          }
        }
      }
    },
    "/dfprop/schemapolicy/statement/register/{projectName}": {
      "post": {
        "summary": "@author prprmurakami",
        "description": "@author prprmurakami",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectName",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "DfpropRegisterSchemaPolicyStatementBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/org.dbflute.intro.app.web.dfprop.schemapolicy.statement.DfpropRegisterSchemaPolicyStatementBody"
            }
          }
        ],
        "tags": [
          "dfprop"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "client error"
          }
        },
        "produces": [
          "text/plain;charset\u003dUTF-8"
        ]
      }
    },
    "/dfprop/schemapolicy/statement/move/{projectName}": {
      "post": {
        "summary": "@author prprmurakami",
        "description": "@author prprmurakami",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectName",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "DfpropMoveSchemaPolicyStatementBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/org.dbflute.intro.app.web.dfprop.schemapolicy.statement.DfpropMoveSchemaPolicyStatementBody"
            }
          }
        ],
        "tags": [
          "dfprop"
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "description": "client error"
          }
        }
      }
    },
    "/dfprop/schemapolicy/statement/delete/{projectName}": {
      "post": {
        "summary": "@author prprmurakami",
        "description": "@author prprmurakami",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectName",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "DfpropDeleteSchemaPolicyStatementBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/org.dbflute.intro.app.web.dfprop.schemapolicy.statement.DfpropDeleteSchemaPolicyStatementBody"
            }
          }
        ],
        "tags": [
          "dfprop"
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "description": "client error"
          }
        }
      }
    },
    "/dfprop/schemapolicy/statement/subject": {
      "get": {
        "summary": "@author prprmurakami",
        "description": "@author prprmurakami",
        "parameters": [
          {
            "name": "mapType",
            "type": "string",
            "enum": [
              "tableMap",
              "columnMap"
            ],
            "description": " * `tableMap` - Table. * `columnMap` - Column. :: fromCls(AppCDef$SubjectableMapType)",
            "in": "query",
            "default": "tableMap",
            "required": true
          }
        ],
        "tags": [
          "dfprop"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "400": {
            "description": "client error"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/dfprop/schemasync/{clientName}": {
      "get": {
        "summary": "@author prprmurakami",
        "description": "@author prprmurakami",
        "parameters": [
          {
            "name": "clientName",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "dfprop"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/org.dbflute.intro.app.web.dfprop.schemasync.DfpropSchemaSyncCheckResult"
            }
          },
          "400": {
            "description": "client error"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/dfprop/schemasync/edit/{clientName}": {
      "post": {
        "summary": "@author prprmurakami",
        "description": "@author prprmurakami",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "clientName",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "DfpropSchemaSyncEditBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/org.dbflute.intro.app.web.dfprop.schemasync.DfpropSchemaSyncEditBody"
            }
          }
        ],
        "tags": [
          "dfprop"
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "description": "client error"
          }
        }
      }
    },
    "/dfprop/settings/{clientName}": {
      "get": {
        "summary": "@author hakiba",
        "description": "@author hakiba",
        "parameters": [
          {
            "name": "clientName",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "dfprop"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/org.dbflute.intro.app.web.dfprop.settings.DfpropSettingsResult"
            }
          },
          "400": {
            "description": "client error"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/dfprop/settings/edit/{clientName}": {
      "post": {
        "summary": "@author hakiba",
        "description": "@author hakiba",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "clientName",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "DfpropSettingsUpdateBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/org.dbflute.intro.app.web.dfprop.settings.DfpropSettingsUpdateBody"
            }
          }
        ],
        "tags": [
          "dfprop"
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "description": "client error"
          }
        }
      }
    },
    "/document/{clientName}/schemahtml": {
      "get": {
        "summary": "@author deco",
        "description": "@author deco",
        "parameters": [
          {
            "name": "clientName",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "document"
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        },
        "produces": [
          "application/octet-stream"
        ]
      }
    },
    "/document/{clientName}/historyhtml": {
      "get": {
        "summary": "@author deco",
        "description": "@author deco",
        "parameters": [
          {
            "name": "clientName",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "document"
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        },
        "produces": [
          "application/octet-stream"
        ]
      }
    },
    "/document/{clientName}/propertieshtml": {
      "get": {
        "summary": "@author deco",
        "description": "@author deco",
        "parameters": [
          {
            "name": "clientName",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "document"
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        },
        "produces": [
          "application/octet-stream"
        ]
      }
    },
    "/document/{clientName}/synccheckresulthtml": {
      "get": {
        "summary": "@author deco",
        "description": "@author deco",
        "parameters": [
          {
            "name": "clientName",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "document"
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        },
        "produces": [
          "application/octet-stream"
        ]
      }
    },
    "/document/{clientName}/altercheckresulthtml": {
      "get": {
        "summary": "@author deco",
        "description": "@author deco",
        "parameters": [
          {
            "name": "clientName",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "document"
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        },
        "produces": [
          "application/octet-stream"
        ]
      }
    },
    "/document/{clientName}/lastadochtml/{moduleName}": {
      "get": {
        "summary": "@author deco",
        "description": "@author deco",
        "parameters": [
          {
            "name": "clientName",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "moduleName",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "document"
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        },
        "produces": [
          "application/octet-stream"
        ]
      }
    },
    "/document/decomment/{clientName}/save": {
      "post": {
        "summary": "@author cabos, save decomment piece map",
        "description": "@author cabos, save decomment piece map",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "clientName",
            "description": "project name",
            "type": "string",
            "in": "path",
            "default": "maihamadb",
            "required": true
          },
          {
            "name": "DecommentSaveBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/org.dbflute.intro.app.web.document.decomment.DecommentSaveBody"
            }
          }
        ],
        "tags": [
          "document"
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "description": "client error"
          }
        }
      }
    },
    "/document/decomment/{clientName}/pickup": {
      "get": {
        "summary": "@author cabos, save decomment piece map",
        "description": "@author cabos, save decomment piece map",
        "parameters": [
          {
            "name": "clientName",
            "description": "project name",
            "type": "string",
            "in": "path",
            "default": "maihamadb",
            "required": true
          }
        ],
        "tags": [
          "document"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/org.dbflute.intro.app.web.document.decomment.DecommentPickupResult"
            }
          },
          "400": {
            "description": "client error"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/document/decomment/{clientName}/mapping": {
      "post": {
        "summary": "@author cabos, save decomment mapping map",
        "description": "@author cabos, save decomment mapping map",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "clientName",
            "description": "project name",
            "type": "string",
            "in": "path",
            "default": "maihamadb",
            "required": true
          },
          {
            "name": "DecommentMappingSaveBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/org.dbflute.intro.app.web.document.decomment.DecommentMappingSaveBody"
            }
          }
        ],
        "tags": [
          "document"
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "description": "client error"
          }
        }
      }
    },
    "/document/hacomment/{clientName}/save": {
      "post": {
        "summary": "@author hakiba",
        "description": "@author hakiba",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "clientName",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "HacommentSaveBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/org.dbflute.intro.app.web.document.hacomment.HacommentSaveBody"
            }
          }
        ],
        "tags": [
          "document"
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "description": "client error"
          }
        }
      }
    },
    "/document/hacomment/{clientName}/pickup": {
      "get": {
        "summary": "@author hakiba",
        "description": "@author hakiba",
        "parameters": [
          {
            "name": "clientName",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "document"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/org.dbflute.intro.app.web.document.hacomment.HacommentPickupResult"
            }
          },
          "400": {
            "description": "client error"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/engine/latest": {
      "post": {
        "summary": "@author p1us2er0",
        "description": "@author p1us2er0",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "EngineLatestBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/org.dbflute.intro.app.web.engine.EngineLatestBody"
            }
          }
        ],
        "tags": [
          "engine"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/org.dbflute.intro.app.web.engine.EngineLatestBean"
            }
          },
          "400": {
            "description": "client error"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/engine/versions": {
      "get": {
        "summary": "@author p1us2er0",
        "description": "@author p1us2er0",
        "parameters": [],
        "tags": [
          "engine"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "400": {
            "description": "client error"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/engine/download/{dbfluteVersion}": {
      "post": {
        "summary": "@author p1us2er0",
        "description": "@author p1us2er0",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dbfluteVersion",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "EngineDownloadBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/org.dbflute.intro.app.web.engine.EngineDownloadBody"
            }
          }
        ],
        "tags": [
          "engine"
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "description": "client error"
          }
        }
      }
    },
    "/engine/remove/{dbfluteVersion}": {
      "get": {
        "summary": "@author p1us2er0",
        "description": "@author p1us2er0",
        "parameters": [
          {
            "name": "dbfluteVersion",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "engine"
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "description": "client error"
          }
        }
      }
    },
    "/intro/manifest": {
      "get": {
        "summary": "@author p1us2er0",
        "description": "@author p1us2er0",
        "parameters": [],
        "tags": [
          "intro"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "client error"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/intro/classifications": {
      "get": {
        "summary": "@author p1us2er0",
        "description": "@author p1us2er0",
        "parameters": [],
        "tags": [
          "intro"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "client error"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/intro/configuration": {
      "get": {
        "summary": "@author p1us2er0",
        "description": "@author p1us2er0",
        "parameters": [],
        "tags": [
          "intro"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "client error"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/log/": {
      "post": {
        "summary": "Endpoint for reading log files.",
        "description": "Endpoint for reading log files.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "LogBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/org.dbflute.intro.app.web.log.LogBody"
            }
          }
        ],
        "tags": [
          "log"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/org.dbflute.intro.app.web.log.LogBean"
            }
          },
          "400": {
            "description": "client error"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/log/latest/{clientName}/{task}": {
      "get": {
        "summary": "Endpoint for reading log files.",
        "description": "Endpoint for reading log files.",
        "parameters": [
          {
            "name": "clientName",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "task",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "log"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/org.dbflute.intro.app.web.log.LogBean"
            }
          },
          "400": {
            "description": "client error"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/log/list/{clientName}": {
      "get": {
        "summary": "Endpoint for reading log files.",
        "description": "Endpoint for reading log files.",
        "parameters": [
          {
            "name": "clientName",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "log"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/java.util.List%3Corg.dbflute.intro.app.web.log.LogBean%3E"
              }
            }
          },
          "400": {
            "description": "client error"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/playsql/list/{clientName}": {
      "get": {
        "summary": "@author deco",
        "description": "@author deco",
        "parameters": [
          {
            "name": "clientName",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "playsql"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/java.util.List%3Corg.dbflute.intro.app.web.playsql.PlaysqlBean%3E"
              }
            }
          },
          "400": {
            "description": "client error"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/playsql/update/{clientName}/{fileName}": {
      "post": {
        "summary": "@author deco",
        "description": "@author deco",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "clientName",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "fileName",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "PlaysqlUpdateBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/org.dbflute.intro.app.web.playsql.PlaysqlUpdateBody"
            }
          }
        ],
        "tags": [
          "playsql"
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "description": "client error"
          }
        }
      }
    },
    "/playsql/data/open/{clientName}": {
      "get": {
        "summary": "@author prprmurakami",
        "description": "@author prprmurakami",
        "parameters": [
          {
            "name": "clientName",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "playsql"
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "description": "client error"
          }
        }
      }
    },
    "/playsql/migration/alter/{projectName}": {
      "get": {
        "summary": "@author cabos, Respond migration directory information of dbflute_client/playsql/migration.",
        "description": "@author cabos, Respond migration directory information of dbflute_client/playsql/migration.",
        "parameters": [
          {
            "name": "projectName",
            "description": "name of client project",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "playsql"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/org.dbflute.intro.app.web.playsql.migration.alter.AlterSQLResult"
            }
          },
          "400": {
            "description": "client error"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/playsql/migration/alter/open/{projectName}": {
      "get": {
        "summary": "@author cabos",
        "description": "@author cabos",
        "parameters": [
          {
            "name": "projectName",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "playsql"
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "description": "client error"
          }
        }
      }
    },
    "/playsql/migration/alter/prepare/{projectName}": {
      "get": {
        "summary": "@author cabos",
        "description": "@author cabos",
        "parameters": [
          {
            "name": "projectName",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "playsql"
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "description": "client error"
          }
        }
      }
    },
    "/playsql/migration/alter/create/{projectName}": {
      "post": {
        "summary": "@author cabos",
        "description": "@author cabos",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectName",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "AlterCreateBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/org.dbflute.intro.app.web.playsql.migration.alter.AlterCreateBody"
            }
          }
        ],
        "tags": [
          "playsql"
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "description": "client error"
          }
        }
      }
    },
    "/task/execute/{projectName}/{instruction}": {
      "get": {
        "summary": "@author p1us2er0",
        "description": "@author p1us2er0",
        "parameters": [
          {
            "name": "projectName",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "instruction",
            "type": "string",
            "enum": [
              "doc",
              "loadDataReverse",
              "schemaSyncCheck",
              "replaceSchema",
              "alterCheck"
            ],
            "description": " * `doc` - Doc. * `loadDataReverse` - LoadDataReverse. * `schemaSyncCheck` - SchemaSyncCheck. * `replaceSchema` - ReplaceSchema. * `alterCheck` - AlterCheck. :: fromCls(AppCDef$TaskInstruction)",
            "in": "path",
            "default": "doc",
            "required": true
          }
        ],
        "tags": [
          "task"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/org.dbflute.intro.app.web.task.TaskExecutionResult"
            }
          },
          "400": {
            "description": "client error"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/welcome/create": {
      "post": {
        "summary": "Welcome画面に対応するAction。\u003cbr\u003e, Welcome画面で入力された情報からDBFluteクライアントを作成する。",
        "description": "Welcome画面に対応するAction。\u003cbr\u003e, Welcome画面で入力された情報からDBFluteクライアントを作成する。",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "WelcomeCreateBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/org.dbflute.intro.app.web.welcome.WelcomeCreateBody"
            }
          }
        ],
        "tags": [
          "welcome"
        ],
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "description": "client error"
          }
        }
      }
    }
  },
  "definitions": {
    "org.dbflute.intro.app.web.client.ClientCreateBody$ClientPart$DatabaseSettingsPart": {
      "type": "object",
      "required": [
        "url",
        "user"
      ],
      "properties": {
        "url": {
          "description": "JDBCの接続URL e.g. jdbc:mysql://localhost:3306/maihamadb",
          "type": "string",
          "example": "jdbc:mysql://localhost:3306/maihamadb"
        },
        "schema": {
          "description": "JDBCの接続スキーマ、DBMSによっては指定なし e.g. maihamadb",
          "type": "string",
          "example": "maihamadb"
        },
        "user": {
          "description": "JDBCの接続ユーザー e.g. maihamauser",
          "type": "string",
          "example": "maihamauser"
        },
        "password": {
          "description": "JDBCの接続パスワード、パスワードなしなら空っぽ e.g. maihamapass",
          "type": "string",
          "example": "maihamapass"
        }
      }
    },
    "org.dbflute.intro.app.web.client.ClientCreateBody$ClientPart$JdbcDriverPart": {
      "type": "object",
      "required": [
        "fileName",
        "data"
      ],
      "properties": {
        "fileName": {
          "description": "JDBCドライバーのjarファイルのファイル名 (パスなし、extlib配下で使われる) e.g. mysql-connector-java-5",
          "type": "string",
          "example": "mysql-connector-java-5.1.46-bin.jar"
        },
        "data": {
          "description": "JDBCドライバーのjarファイルの中身のデータ(Base64形式)、豪快だね e.g. QWERTYUIOP",
          "type": "string",
          "example": "QWERTYUIOP"
        }
      }
    },
    "org.dbflute.intro.app.web.client.ClientCreateBody$ClientPart$OptionBody": {
      "type": "object",
      "properties": {
        "dbCommentOnAliasBasis": {
          "type": "boolean"
        },
        "aliasDelimiterInDbComment": {
          "type": "string"
        },
        "checkColumnDefOrderDiff": {
          "type": "boolean"
        },
        "checkDbCommentDiff": {
          "type": "boolean"
        },
        "checkProcedureDiff": {
          "type": "boolean"
        },
        "generateProcedureParameterBean": {
          "type": "boolean"
        },
        "procedureSynonymHandlingType": {
          "type": "string"
        }
      }
    },
    "org.dbflute.intro.app.web.client.ClientCreateBody$ClientPart": {
      "type": "object",
      "required": [
        "projectName",
        "databaseCode",
        "languageCode",
        "containerCode",
        "packageBase",
        "jdbcDriverFqcn",
        "mainSchemaSettings",
        "dbfluteVersion",
        "schemaSyncCheckMap"
      ],
      "properties": {
        "projectName": {
          "description": "DBFluteクライアントのプロジェクト名 e.g. maihamadb",
          "type": "string",
          "example": "maihamadb"
        },
        "databaseCode": {
          "description": "DBMSを識別するコード e.g. mysql: * `mysql` - MySQL. * `postgresql` - PostgreSQL. * `oracle` - Oracle. * `db2` - Db2, DB2. * `sqlserver` - SQLServer. * `h2` - H2Database, H2 Database. * `derby` - ApacheDerby, Apache Derby. :: fromCls(CDef$TargetDatabase)",
          "type": "string",
          "enum": [
            "mysql",
            "postgresql",
            "oracle",
            "db2",
            "sqlserver",
            "h2",
            "derby"
          ],
          "example": "mysql"
        },
        "languageCode": {
          "description": "自動生成コードの言語を識別するコード e.g. java: * `java` - Java. * `csharp` - C, C#. * `scala` - Scala. :: fromCls(CDef$TargetLanguage)",
          "type": "string",
          "enum": [
            "java",
            "csharp",
            "scala"
          ],
          "example": "java"
        },
        "containerCode": {
          "description": "自動生成コードが利用するDIコンテナを識別するコード e.g. lasta_di: * `lasta_di` - LastaDi, Lasta Di. * `spring` - SpringFramework, Spring Framework. * `guice` - GoogleGuice, Google Guice. * `seasar` - SeasarS2Container, Seasar (S2Container). * `cdi` - Cdi, CDI. :: fromCls(CDef$TargetContainer)",
          "type": "string",
          "enum": [
            "lasta_di",
            "spring",
            "guice",
            "seasar",
            "cdi"
          ],
          "example": "lasta_di"
        },
        "packageBase": {
          "description": "自動生成コードの基底パッケージ (",
          "type": "string",
          "example": "org.docksidestage.showbase"
        },
        "jdbcDriverFqcn": {
          "description": "JDBCドライバーのクラス名 e.g. com",
          "type": "string",
          "example": "com.mysql.jdbc.Driver"
        },
        "mainSchemaSettings": {
          "$ref": "#/definitions/org.dbflute.intro.app.web.client.ClientCreateBody%24ClientPart%24DatabaseSettingsPart"
        },
        "systemUserSettings": {
          "$ref": "#/definitions/org.dbflute.intro.app.web.client.ClientCreateBody%24ClientPart%24DatabaseSettingsPart"
        },
        "dbfluteVersion": {
          "description": "DBFluteクライアント作成時のDBFluteエンジンのバージョン、基本的に最新 e.g. 1",
          "type": "string",
          "example": "1.2.6"
        },
        "jdbcDriver": {
          "$ref": "#/definitions/org.dbflute.intro.app.web.client.ClientCreateBody%24ClientPart%24JdbcDriverPart"
        },
        "optionBody": {
          "$ref": "#/definitions/org.dbflute.intro.app.web.client.ClientCreateBody%24ClientPart%24OptionBody"
        },
        "schemaSyncCheckMap": {
          "description": "SchemaSyncCheckするためのDB情報",
          "type": "object"
        }
      }
    },
    "org.dbflute.intro.app.web.client.ClientCreateBody": {
      "type": "object",
      "required": [
        "client",
        "testConnection"
      ],
      "properties": {
        "client": {
          "$ref": "#/definitions/org.dbflute.intro.app.web.client.ClientCreateBody%24ClientPart"
        },
        "testConnection": {
          "description": "DBMSへの接続テストを行うかどうか？ e.g. false",
          "type": "boolean",
          "example": false
        }
      }
    },
    "java.util.List\u003corg.dbflute.intro.app.web.client.list.ClientRowResult\u003e": {
      "type": "object",
      "required": [
        "projectName",
        "databaseCode",
        "languageCode",
        "containerCode"
      ],
      "properties": {
        "projectName": {
          "type": "string"
        },
        "databaseCode": {
          "type": "string",
          "enum": [
            "mysql",
            "postgresql",
            "oracle",
            "db2",
            "sqlserver",
            "h2",
            "derby"
          ],
          "description": " * `mysql` - MySQL. * `postgresql` - PostgreSQL. * `oracle` - Oracle. * `db2` - Db2, DB2. * `sqlserver` - SQLServer. * `h2` - H2Database, H2 Database. * `derby` - ApacheDerby, Apache Derby. :: fromCls(CDef$TargetDatabase)",
          "example": "mysql"
        },
        "languageCode": {
          "type": "string",
          "enum": [
            "java",
            "csharp",
            "scala"
          ],
          "description": " * `java` - Java. * `csharp` - C, C#. * `scala` - Scala. :: fromCls(CDef$TargetLanguage)",
          "example": "java"
        },
        "containerCode": {
          "type": "string",
          "enum": [
            "lasta_di",
            "spring",
            "guice",
            "seasar",
            "cdi"
          ],
          "description": " * `lasta_di` - LastaDi, Lasta Di. * `spring` - SpringFramework, Spring Framework. * `guice` - GoogleGuice, Google Guice. * `seasar` - SeasarS2Container, Seasar (S2Container). * `cdi` - Cdi, CDI. :: fromCls(CDef$TargetContainer)",
          "example": "lasta_di"
        }
      }
    },
    "org.dbflute.intro.app.web.client.propbase.ClientPropbaseResult": {
      "type": "object",
      "required": [
        "projectName",
        "databaseCode",
        "languageCode",
        "containerCode",
        "dbfluteVersion",
        "hasSchemaHtml",
        "hasHistoryHtml",
        "hasSyncCheckResultHtml",
        "hasAlterCheckResultHtml"
      ],
      "properties": {
        "projectName": {
          "description": "DBFluteクライアントのプロジェクト名 e.g. maihamadb",
          "type": "string",
          "example": "maihamadb"
        },
        "databaseCode": {
          "description": "DBMSを識別するコード e.g. mysql: * `mysql` - MySQL. * `postgresql` - PostgreSQL. * `oracle` - Oracle. * `db2` - Db2, DB2. * `sqlserver` - SQLServer. * `h2` - H2Database, H2 Database. * `derby` - ApacheDerby, Apache Derby. :: fromCls(CDef$TargetDatabase)",
          "type": "string",
          "enum": [
            "mysql",
            "postgresql",
            "oracle",
            "db2",
            "sqlserver",
            "h2",
            "derby"
          ],
          "example": "mysql"
        },
        "languageCode": {
          "description": "自動生成コードの言語を識別するコード e.g. java: * `java` - Java. * `csharp` - C, C#. * `scala` - Scala. :: fromCls(CDef$TargetLanguage)",
          "type": "string",
          "enum": [
            "java",
            "csharp",
            "scala"
          ],
          "example": "java"
        },
        "containerCode": {
          "description": "自動生成コードが利用するDIコンテナを識別するコード e.g. lasta_di: * `lasta_di` - LastaDi, Lasta Di. * `spring` - SpringFramework, Spring Framework. * `guice` - GoogleGuice, Google Guice. * `seasar` - SeasarS2Container, Seasar (S2Container). * `cdi` - Cdi, CDI. :: fromCls(CDef$TargetContainer)",
          "type": "string",
          "enum": [
            "lasta_di",
            "spring",
            "guice",
            "seasar",
            "cdi"
          ],
          "example": "lasta_di"
        },
        "dbfluteVersion": {
          "description": "そのDBFluteクライアントが利用するDBFluteのバージョン e.g. 1",
          "type": "string",
          "example": "1.2.6"
        },
        "hasSchemaHtml": {
          "description": "SchemaHTMLが自動生成されているかどうか？ e.g. false",
          "type": "boolean",
          "example": false
        },
        "hasHistoryHtml": {
          "description": "HistoryHTMLが自動生成されているかどうか？ e.g. false",
          "type": "boolean",
          "example": false
        },
        "hasSyncCheckResultHtml": {
          "description": "SchemaSyncCheckの結果HTMLが存在しているかどうか？ e.g. false",
          "type": "boolean",
          "example": false
        },
        "hasAlterCheckResultHtml": {
          "description": "AlterCheckの結果HTMLが存在しているかどうか？ e.g. false",
          "type": "boolean",
          "example": false
        },
        "violatesSchemaPolicy": {
          "description": "SchemaPolicyの違反がある状態かどうか？ (古いバージョンの場合はnull) e.g. false",
          "type": "boolean",
          "example": false
        }
      }
    },
    "java.util.List\u003corg.dbflute.intro.app.web.dfprop.DfpropBean\u003e": {
      "type": "object",
      "required": [
        "fileName",
        "content"
      ],
      "properties": {
        "fileName": {
          "type": "string"
        },
        "content": {
          "type": "string"
        }
      }
    },
    "org.dbflute.intro.app.web.dfprop.DfpropUpdateBody": {
      "type": "object",
      "required": [
        "content"
      ],
      "properties": {
        "content": {
          "type": "string"
        }
      }
    },
    "org.dbflute.intro.app.web.dfprop.document.DfpropDocumentResult": {
      "type": "object",
      "properties": {
        "upperCaseBasic": {
          "type": "boolean"
        },
        "aliasDelimiterInDbComment": {
          "type": "string"
        },
        "dbCommentOnAliasBasis": {
          "type": "boolean"
        },
        "checkColumnDefOrderDiff": {
          "type": "boolean"
        },
        "checkDbCommentDiff": {
          "type": "boolean"
        },
        "checkProcedureDiff": {
          "type": "boolean"
        }
      }
    },
    "org.dbflute.intro.app.web.dfprop.document.DfpropDocumentEditBody": {
      "type": "object",
      "required": [
        "upperCaseBasic",
        "dbCommentOnAliasBasis",
        "checkColumnDefOrderDiff",
        "checkDbCommentDiff",
        "checkProcedureDiff"
      ],
      "properties": {
        "upperCaseBasic": {
          "type": "boolean"
        },
        "aliasDelimiterInDbComment": {
          "type": "string"
        },
        "dbCommentOnAliasBasis": {
          "type": "boolean"
        },
        "checkColumnDefOrderDiff": {
          "type": "boolean"
        },
        "checkDbCommentDiff": {
          "type": "boolean"
        },
        "checkProcedureDiff": {
          "type": "boolean"
        }
      }
    },
    "org.dbflute.intro.app.web.dfprop.schemapolicy.DfpropSchemaPolicyResult$Theme": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "typeCode": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        }
      }
    },
    "org.dbflute.intro.app.web.dfprop.schemapolicy.DfpropSchemaPolicyResult$WholeMap": {
      "type": "object",
      "properties": {
        "themeList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/org.dbflute.intro.app.web.dfprop.schemapolicy.DfpropSchemaPolicyResult%24Theme"
          }
        }
      }
    },
    "org.dbflute.intro.app.web.dfprop.schemapolicy.DfpropSchemaPolicyResult$TableMap": {
      "type": "object",
      "properties": {
        "themeList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/org.dbflute.intro.app.web.dfprop.schemapolicy.DfpropSchemaPolicyResult%24Theme"
          }
        },
        "statementList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "org.dbflute.intro.app.web.dfprop.schemapolicy.DfpropSchemaPolicyResult$ColumnMap": {
      "type": "object",
      "properties": {
        "themeList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/org.dbflute.intro.app.web.dfprop.schemapolicy.DfpropSchemaPolicyResult%24Theme"
          }
        },
        "statementList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "org.dbflute.intro.app.web.dfprop.schemapolicy.DfpropSchemaPolicyResult": {
      "type": "object",
      "properties": {
        "wholeMap": {
          "$ref": "#/definitions/org.dbflute.intro.app.web.dfprop.schemapolicy.DfpropSchemaPolicyResult%24WholeMap"
        },
        "tableMap": {
          "$ref": "#/definitions/org.dbflute.intro.app.web.dfprop.schemapolicy.DfpropSchemaPolicyResult%24TableMap"
        },
        "columnMap": {
          "$ref": "#/definitions/org.dbflute.intro.app.web.dfprop.schemapolicy.DfpropSchemaPolicyResult%24ColumnMap"
        }
      }
    },
    "org.dbflute.intro.app.web.dfprop.schemapolicy.DfpropSchemaPolicyEditBody$Theme": {
      "type": "object",
      "required": [
        "typeCode",
        "isActive"
      ],
      "properties": {
        "typeCode": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        }
      }
    },
    "org.dbflute.intro.app.web.dfprop.schemapolicy.DfpropSchemaPolicyEditBody$WholeMap": {
      "type": "object",
      "properties": {
        "themeList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/org.dbflute.intro.app.web.dfprop.schemapolicy.DfpropSchemaPolicyEditBody%24Theme"
          }
        }
      }
    },
    "org.dbflute.intro.app.web.dfprop.schemapolicy.DfpropSchemaPolicyEditBody$TableMap": {
      "type": "object",
      "properties": {
        "themeList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/org.dbflute.intro.app.web.dfprop.schemapolicy.DfpropSchemaPolicyEditBody%24Theme"
          }
        }
      }
    },
    "org.dbflute.intro.app.web.dfprop.schemapolicy.DfpropSchemaPolicyEditBody$ColumnMap": {
      "type": "object",
      "properties": {
        "themeList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/org.dbflute.intro.app.web.dfprop.schemapolicy.DfpropSchemaPolicyEditBody%24Theme"
          }
        }
      }
    },
    "org.dbflute.intro.app.web.dfprop.schemapolicy.DfpropSchemaPolicyEditBody": {
      "type": "object",
      "properties": {
        "wholeMap": {
          "$ref": "#/definitions/org.dbflute.intro.app.web.dfprop.schemapolicy.DfpropSchemaPolicyEditBody%24WholeMap"
        },
        "tableMap": {
          "$ref": "#/definitions/org.dbflute.intro.app.web.dfprop.schemapolicy.DfpropSchemaPolicyEditBody%24TableMap"
        },
        "columnMap": {
          "$ref": "#/definitions/org.dbflute.intro.app.web.dfprop.schemapolicy.DfpropSchemaPolicyEditBody%24ColumnMap"
        }
      }
    },
    "org.dbflute.intro.app.web.dfprop.schemapolicy.statement.DfpropRegisterSchemaPolicyStatementBody$ConditionPart": {
      "type": "object",
      "required": [
        "operator",
        "conditions"
      ],
      "properties": {
        "operator": {
          "type": "string"
        },
        "conditions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "org.dbflute.intro.app.web.dfprop.schemapolicy.statement.DfpropRegisterSchemaPolicyStatementBody$ExpectedPart": {
      "type": "object",
      "required": [
        "operator",
        "expected"
      ],
      "properties": {
        "operator": {
          "type": "string"
        },
        "expected": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "org.dbflute.intro.app.web.dfprop.schemapolicy.statement.DfpropRegisterSchemaPolicyStatementBody": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "condition": {
          "$ref": "#/definitions/org.dbflute.intro.app.web.dfprop.schemapolicy.statement.DfpropRegisterSchemaPolicyStatementBody%24ConditionPart"
        },
        "expected": {
          "$ref": "#/definitions/org.dbflute.intro.app.web.dfprop.schemapolicy.statement.DfpropRegisterSchemaPolicyStatementBody%24ExpectedPart"
        },
        "comment": {
          "type": "string"
        }
      }
    },
    "org.dbflute.intro.app.web.dfprop.schemapolicy.statement.DfpropMoveSchemaPolicyStatementBody": {
      "type": "object",
      "required": [
        "mapType",
        "fromIndex",
        "toIndex"
      ],
      "properties": {
        "mapType": {
          "type": "string"
        },
        "fromIndex": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "toIndex": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        }
      }
    },
    "org.dbflute.intro.app.web.dfprop.schemapolicy.statement.DfpropDeleteSchemaPolicyStatementBody": {
      "type": "object",
      "required": [
        "mapType",
        "statement"
      ],
      "properties": {
        "mapType": {
          "type": "string"
        },
        "statement": {
          "type": "string"
        }
      }
    },
    "org.dbflute.intro.app.web.dfprop.schemasync.DfpropSchemaSyncCheckResult": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "schema": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "isSuppressCraftDiff": {
          "type": "boolean"
        }
      }
    },
    "org.dbflute.intro.app.web.dfprop.schemasync.DfpropSchemaSyncEditBody": {
      "type": "object",
      "required": [
        "url",
        "user",
        "isSuppressCraftDiff"
      ],
      "properties": {
        "url": {
          "type": "string"
        },
        "schema": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "isSuppressCraftDiff": {
          "type": "boolean"
        }
      }
    },
    "org.dbflute.intro.app.web.dfprop.settings.DfpropSettingsResult$DatabaseSettingsPart": {
      "type": "object",
      "required": [
        "url",
        "user"
      ],
      "properties": {
        "url": {
          "type": "string"
        },
        "schema": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "org.dbflute.intro.app.web.dfprop.settings.DfpropSettingsResult": {
      "type": "object",
      "required": [
        "projectName",
        "databaseCode",
        "languageCode",
        "containerCode",
        "packageBase",
        "jdbcDriverFqcn",
        "mainSchemaSettings",
        "dbfluteVersion"
      ],
      "properties": {
        "projectName": {
          "type": "string"
        },
        "databaseCode": {
          "type": "string",
          "enum": [
            "mysql",
            "postgresql",
            "oracle",
            "db2",
            "sqlserver",
            "h2",
            "derby"
          ],
          "description": " * `mysql` - MySQL. * `postgresql` - PostgreSQL. * `oracle` - Oracle. * `db2` - Db2, DB2. * `sqlserver` - SQLServer. * `h2` - H2Database, H2 Database. * `derby` - ApacheDerby, Apache Derby. :: fromCls(CDef$TargetDatabase)",
          "example": "mysql"
        },
        "languageCode": {
          "type": "string",
          "enum": [
            "java",
            "csharp",
            "scala"
          ],
          "description": " * `java` - Java. * `csharp` - C, C#. * `scala` - Scala. :: fromCls(CDef$TargetLanguage)",
          "example": "java"
        },
        "containerCode": {
          "type": "string",
          "enum": [
            "lasta_di",
            "spring",
            "guice",
            "seasar",
            "cdi"
          ],
          "description": " * `lasta_di` - LastaDi, Lasta Di. * `spring` - SpringFramework, Spring Framework. * `guice` - GoogleGuice, Google Guice. * `seasar` - SeasarS2Container, Seasar (S2Container). * `cdi` - Cdi, CDI. :: fromCls(CDef$TargetContainer)",
          "example": "lasta_di"
        },
        "packageBase": {
          "type": "string"
        },
        "jdbcDriverFqcn": {
          "type": "string"
        },
        "mainSchemaSettings": {
          "$ref": "#/definitions/org.dbflute.intro.app.web.dfprop.settings.DfpropSettingsResult%24DatabaseSettingsPart"
        },
        "dbfluteVersion": {
          "type": "string"
        },
        "jdbcDriverJarPath": {
          "type": "string"
        }
      }
    },
    "org.dbflute.intro.app.web.dfprop.settings.DfpropSettingsUpdateBody$ClientPart$DatabaseSettingsPart": {
      "type": "object",
      "required": [
        "url",
        "user"
      ],
      "properties": {
        "url": {
          "type": "string"
        },
        "schema": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "org.dbflute.intro.app.web.dfprop.settings.DfpropSettingsUpdateBody$ClientPart": {
      "type": "object",
      "required": [
        "databaseCode",
        "languageCode",
        "containerCode",
        "packageBase",
        "jdbcDriverFqcn",
        "mainSchemaSettings",
        "dbfluteVersion"
      ],
      "properties": {
        "databaseCode": {
          "type": "string",
          "enum": [
            "mysql",
            "postgresql",
            "oracle",
            "db2",
            "sqlserver",
            "h2",
            "derby"
          ],
          "description": " * `mysql` - MySQL. * `postgresql` - PostgreSQL. * `oracle` - Oracle. * `db2` - Db2, DB2. * `sqlserver` - SQLServer. * `h2` - H2Database, H2 Database. * `derby` - ApacheDerby, Apache Derby. :: fromCls(CDef$TargetDatabase)",
          "example": "mysql"
        },
        "languageCode": {
          "type": "string",
          "enum": [
            "java",
            "csharp",
            "scala"
          ],
          "description": " * `java` - Java. * `csharp` - C, C#. * `scala` - Scala. :: fromCls(CDef$TargetLanguage)",
          "example": "java"
        },
        "containerCode": {
          "type": "string",
          "enum": [
            "lasta_di",
            "spring",
            "guice",
            "seasar",
            "cdi"
          ],
          "description": " * `lasta_di` - LastaDi, Lasta Di. * `spring` - SpringFramework, Spring Framework. * `guice` - GoogleGuice, Google Guice. * `seasar` - SeasarS2Container, Seasar (S2Container). * `cdi` - Cdi, CDI. :: fromCls(CDef$TargetContainer)",
          "example": "lasta_di"
        },
        "packageBase": {
          "type": "string"
        },
        "jdbcDriverFqcn": {
          "type": "string"
        },
        "mainSchemaSettings": {
          "$ref": "#/definitions/org.dbflute.intro.app.web.dfprop.settings.DfpropSettingsUpdateBody%24ClientPart%24DatabaseSettingsPart"
        },
        "dbfluteVersion": {
          "type": "string"
        }
      }
    },
    "org.dbflute.intro.app.web.dfprop.settings.DfpropSettingsUpdateBody": {
      "type": "object",
      "required": [
        "client"
      ],
      "properties": {
        "client": {
          "$ref": "#/definitions/org.dbflute.intro.app.web.dfprop.settings.DfpropSettingsUpdateBody%24ClientPart"
        }
      }
    },
    "org.dbflute.intro.app.web.document.decomment.DecommentSaveBody": {
      "type": "object",
      "required": [
        "tableName",
        "targetType",
        "decomment",
        "commentVersion",
        "authors",
        "previousPieces"
      ],
      "properties": {
        "tableName": {
          "description": "table name\ne.g. \"MEMBER\"",
          "type": "string",
          "example": "MEMBER"
        },
        "columnName": {
          "description": "column name\nThe decomment target may be TABLE so null allowed",
          "type": "string",
          "example": "MEMBER_NAME"
        },
        "targetType": {
          "description": "decomment target type\ne.g. COLUMN: * `COLUMN` - Column. * `TABLE` - Table. :: fromCls(DfDecoMapPieceTargetType)",
          "type": "string",
          "enum": [
            "COLUMN",
            "TABLE"
          ],
          "example": "COLUMN"
        },
        "decomment": {
          "description": "inputted column comment on the schema",
          "type": "string",
          "example": "this column\u0027s value is always null ...??  DO NOT BE SILLY!!!"
        },
        "databaseComment": {
          "description": "column comment on table definition\nThe comments on database may be blank so null allowed",
          "type": "string",
          "example": "this column\u0027s value allowed null?"
        },
        "commentVersion": {
          "description": "column comment version\nThe comment version will update when the decomment",
          "type": "integer",
          "format": "int64",
          "example": 2
        },
        "inputAuthor": {
          "description": "the input author\nOnly used when run as decomment server {@link IntroSystemLogic#isDecommentServer()}\ne.g. \"cabos\"",
          "type": "string",
          "example": "cabos"
        },
        "authors": {
          "description": "the list of ancestor authors\nCurrent piece author is derived by server at first decomment so empty allowed",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "cabos",
            "hakiba",
            "deco"
          ]
        },
        "previousPieces": {
          "description": "the list of previous piece code\nCurrent piece code is derived by server at first decomment so empty allowed",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "FE893L1"
          ]
        }
      }
    },
    "org.dbflute.intro.app.web.document.decomment.DecommentPickupResult$MappingPart": {
      "type": "object",
      "required": [
        "newTableName",
        "authors",
        "mappingCode",
        "mappingOwner",
        "mappingDatetime",
        "previousMappings"
      ],
      "properties": {
        "newTableName": {
          "description": "new table name after mapped\ne.g. \"NEW_TABLE_NAME\"",
          "type": "string",
          "example": "NEW_TABLE_NAME"
        },
        "newColumnName": {
          "description": "new column name after mapped\nthis could be null if target type was table",
          "type": "string",
          "example": "NEW_COLUMN_NAME"
        },
        "authors": {
          "description": "the list of ancestor authors\ne.g. [\"cabos\", \"hakiba\", \"deco\"]",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "cabos",
            "hakiba",
            "deco"
          ]
        },
        "mappingCode": {
          "description": "mapping code generated when decomment mapped\ne.g. \"EF89371\"",
          "type": "string",
          "example": "EF89371"
        },
        "mappingOwner": {
          "description": "author of this decomment mapping\ne.g. \"deco\"",
          "type": "string",
          "example": "deco"
        },
        "mappingDatetime": {
          "description": "time of decomment mapped\ne.g. \"2018-04-22T17:35:22",
          "type": "string",
          "format": "date-time",
          "example": "2018-04-22T17:35:22.235"
        },
        "previousMappings": {
          "description": "list of merged mapping code\ne.g. [\"HF7ELSE\"]",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "HF7ELSE"
          ]
        }
      }
    },
    "org.dbflute.intro.app.web.document.decomment.DecommentPickupResult$PropertyPart": {
      "type": "object",
      "required": [
        "decomment",
        "commentVersion",
        "authors",
        "pieceCode",
        "pieceDatetime",
        "pieceOwner",
        "previousPieces"
      ],
      "properties": {
        "decomment": {
          "description": "decomment saved as decomment piece map\ne.g. \"decomment means \u0027deco\u0027 + \u0027database comment\u0027\"",
          "type": "string",
          "example": "decomment means \u0027deco\u0027 + \u0027database comment\u0027"
        },
        "databaseComment": {
          "description": "table or column comment on table definition\nThe comments on database may be blank so null allowed",
          "type": "string",
          "example": "let\u0027s cabos"
        },
        "commentVersion": {
          "description": "table or column comment version\nThe comment version will update when the decomment",
          "type": "integer",
          "format": "int64",
          "example": 3
        },
        "authors": {
          "description": "the list of ancestor authors\ne.g. [\"cabos\", \"hakiba\", \"deco\"]",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "cabos",
            "hakiba",
            "deco"
          ]
        },
        "pieceCode": {
          "description": "piece code generated when decomment edited\ne.g. \"EF89371\"",
          "type": "string",
          "example": "EF89371"
        },
        "pieceDatetime": {
          "description": "time of edit decomment\ne.g. \"2017-11-11T18:32:22",
          "type": "string",
          "format": "date-time",
          "example": "2017-11-11T18:32:22.235"
        },
        "pieceOwner": {
          "description": "author of this decomment piece\ne.g. \"deco\"",
          "type": "string",
          "example": "deco"
        },
        "pieceGitBranch": {
          "description": "Branch name of this decomment piece\ne.g. \"develop\"",
          "type": "string",
          "example": "develop"
        },
        "previousPieces": {
          "description": "list of merged piece code\ne.g. [\"HF7ELSE\"]",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "HF7ELSE"
          ]
        }
      }
    },
    "org.dbflute.intro.app.web.document.decomment.DecommentPickupResult$TablePart$ColumnPart": {
      "type": "object",
      "required": [
        "columnName",
        "mappings",
        "properties"
      ],
      "properties": {
        "columnName": {
          "description": "column name\ne.g. \"MEMBER_NAME\"",
          "type": "string",
          "example": "MEMBER_NAME"
        },
        "mappings": {
          "description": "list of decomment properties associated column",
          "type": "array",
          "items": {
            "$ref": "#/definitions/org.dbflute.intro.app.web.document.decomment.DecommentPickupResult%24MappingPart"
          }
        },
        "properties": {
          "description": "list of decomment properties associated column\nenable empty if alter doc task branch and topic branch existed piece was not mapped were merged",
          "type": "array",
          "items": {
            "$ref": "#/definitions/org.dbflute.intro.app.web.document.decomment.DecommentPickupResult%24PropertyPart"
          }
        }
      }
    },
    "org.dbflute.intro.app.web.document.decomment.DecommentPickupResult$TablePart": {
      "type": "object",
      "required": [
        "tableName",
        "mappings",
        "properties"
      ],
      "properties": {
        "tableName": {
          "description": "table name\ne.g. \"MEMBER\"",
          "type": "string",
          "example": "MEMBER"
        },
        "mappings": {
          "description": "list of conflicted mapping\n this list could be empty when conflict mapping was not exists",
          "type": "array",
          "items": {
            "$ref": "#/definitions/org.dbflute.intro.app.web.document.decomment.DecommentPickupResult%24MappingPart"
          }
        },
        "properties": {
          "description": "list of decomment properties associated table",
          "type": "array",
          "items": {
            "$ref": "#/definitions/org.dbflute.intro.app.web.document.decomment.DecommentPickupResult%24PropertyPart"
          }
        },
        "columns": {
          "description": "list of column part, contains saved comments",
          "type": "array",
          "items": {
            "$ref": "#/definitions/org.dbflute.intro.app.web.document.decomment.DecommentPickupResult%24TablePart%24ColumnPart"
          }
        }
      }
    },
    "org.dbflute.intro.app.web.document.decomment.DecommentPickupResult": {
      "type": "object",
      "required": [
        "tables"
      ],
      "properties": {
        "tables": {
          "description": "list of table part\nenable empty first",
          "type": "array",
          "items": {
            "$ref": "#/definitions/org.dbflute.intro.app.web.document.decomment.DecommentPickupResult%24TablePart"
          }
        }
      }
    },
    "org.dbflute.intro.app.web.document.decomment.DecommentMappingSaveBody$MappingPart": {
      "type": "object",
      "required": [
        "oldTableName",
        "newTableName",
        "targetType",
        "authors",
        "previousMappings"
      ],
      "properties": {
        "oldTableName": {
          "description": "old table name\ne.g. OLD_TABLE_NAME",
          "type": "string",
          "example": "OLD_TABLE_NAME"
        },
        "oldColumnName": {
          "description": "old column name\nthis field can be null if mapping is for table\ne.g. OLD_COLUMN_NAME",
          "type": "string",
          "example": "OLD_COLUMN_NAME"
        },
        "newTableName": {
          "description": "new table name\ne.g. NEW_TABLE_NAME",
          "type": "string",
          "example": "NEW_TABLE_NAME"
        },
        "newColumnName": {
          "description": "new column name\nthis field can be null if mapping is for table\ne.g. NEW_COLUMN_NAME",
          "type": "string",
          "example": "NEW_COLUMN_NAME"
        },
        "targetType": {
          "description": "mapping target type\ne.g. COLUMN: * `COLUMN` - Column. * `TABLE` - Table. :: fromCls(DfDecoMapPieceTargetType)",
          "type": "string",
          "enum": [
            "COLUMN",
            "TABLE"
          ],
          "example": "COLUMN"
        },
        "author": {
          "description": "the current author\nOnly used when run as decomment server {@link IntroSystemLogic#isDecommentServer()}\ne.g. \"cabos\"",
          "type": "string",
          "example": "cabos"
        },
        "authors": {
          "description": "the list of ancestor authors\nCurrent mapping author is derived by server at first decomment so empty allowed",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "hakiba"
          ]
        },
        "previousMappings": {
          "description": "the list of previous piece code\nCurrent mapping code is derived by server at first decomment so empty allowed",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "FE893L1"
          ]
        }
      }
    },
    "org.dbflute.intro.app.web.document.decomment.DecommentMappingSaveBody": {
      "type": "object",
      "required": [
        "mappings"
      ],
      "properties": {
        "mappings": {
          "description": "mapping list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/org.dbflute.intro.app.web.document.decomment.DecommentMappingSaveBody%24MappingPart"
          }
        }
      }
    },
    "org.dbflute.intro.app.web.document.hacomment.HacommentSaveBody": {
      "type": "object",
      "required": [
        "diffDate",
        "hacomment",
        "authors",
        "previousPieces"
      ],
      "properties": {
        "diffDate": {
          "type": "string"
        },
        "hacomment": {
          "type": "string"
        },
        "diffComment": {
          "type": "string"
        },
        "authors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "previousPieces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "org.dbflute.intro.app.web.document.hacomment.HacommentPickupResult$PropertyPart": {
      "type": "object",
      "required": [
        "hacomment",
        "authorList",
        "pieceCode",
        "pieceOwner",
        "pieceDatetime",
        "previousPieceList"
      ],
      "properties": {
        "hacomment": {
          "type": "string"
        },
        "diffComment": {
          "type": "string"
        },
        "authorList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "pieceCode": {
          "type": "string"
        },
        "pieceOwner": {
          "type": "string"
        },
        "pieceDatetime": {
          "type": "string",
          "format": "date-time",
          "example": "2000-01-01T00:00:00.000"
        },
        "previousPieceList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "org.dbflute.intro.app.web.document.hacomment.HacommentPickupResult$DiffPart": {
      "type": "object",
      "required": [
        "diffCode",
        "diffDate",
        "properties"
      ],
      "properties": {
        "diffCode": {
          "type": "string"
        },
        "diffDate": {
          "type": "string"
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/org.dbflute.intro.app.web.document.hacomment.HacommentPickupResult%24PropertyPart"
          }
        }
      }
    },
    "org.dbflute.intro.app.web.document.hacomment.HacommentPickupResult": {
      "type": "object",
      "required": [
        "diffList"
      ],
      "properties": {
        "diffList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/org.dbflute.intro.app.web.document.hacomment.HacommentPickupResult%24DiffPart"
          }
        }
      }
    },
    "org.dbflute.intro.app.web.engine.EngineLatestBody": {
      "type": "object",
      "properties": {
        "useSystemProxies": {
          "type": "boolean"
        }
      }
    },
    "org.dbflute.intro.app.web.engine.EngineLatestBean": {
      "type": "object",
      "required": [
        "latestReleaseVersion",
        "latestSnapshotVersion"
      ],
      "properties": {
        "latestReleaseVersion": {
          "type": "string"
        },
        "latestSnapshotVersion": {
          "type": "string"
        }
      }
    },
    "org.dbflute.intro.app.web.engine.EngineDownloadBody": {
      "type": "object",
      "properties": {
        "useSystemProxies": {
          "type": "boolean"
        }
      }
    },
    "org.dbflute.intro.app.web.log.LogBody": {
      "type": "object",
      "required": [
        "project",
        "fileName"
      ],
      "properties": {
        "project": {
          "description": "DBFlute client name\ne.g. \"maihamadb\"",
          "type": "string",
          "example": "maihamadb"
        },
        "fileName": {
          "description": "log file name\nLog files are under the dbflute_yourdb(DBFlute client)/log\ne.g. \"intro-last-execute-failure-alterCheck",
          "type": "string",
          "example": "intro-last-execute-failure-alterCheck.log"
        }
      }
    },
    "org.dbflute.intro.app.web.log.LogBean": {
      "type": "object",
      "required": [
        "fileName",
        "content"
      ],
      "properties": {
        "fileName": {
          "description": "log file name\nLog files are under the dbflute_yourdb(DBFlute client)/log\ne.g. \"intro-last-execute-failure-alterCheck",
          "type": "string",
          "example": "intro-last-execute-failure-alterCheck.log"
        },
        "content": {
          "description": "long long texts in log file\ne.g. \"[df-replace-schema] /",
          "type": "string",
          "example": "[df-replace-schema] /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"
        }
      }
    },
    "java.util.List\u003corg.dbflute.intro.app.web.log.LogBean\u003e": {
      "type": "object",
      "required": [
        "fileName",
        "content"
      ],
      "properties": {
        "fileName": {
          "description": "log file name\nLog files are under the dbflute_yourdb(DBFlute client)/log\ne.g. \"intro-last-execute-failure-alterCheck",
          "type": "string",
          "example": "intro-last-execute-failure-alterCheck.log"
        },
        "content": {
          "description": "long long texts in log file\ne.g. \"[df-replace-schema] /",
          "type": "string",
          "example": "[df-replace-schema] /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"
        }
      }
    },
    "java.util.List\u003corg.dbflute.intro.app.web.playsql.PlaysqlBean\u003e": {
      "type": "object",
      "required": [
        "fileName"
      ],
      "properties": {
        "fileName": {
          "type": "string"
        },
        "content": {
          "type": "string"
        }
      }
    },
    "org.dbflute.intro.app.web.playsql.PlaysqlUpdateBody": {
      "type": "object",
      "required": [
        "content"
      ],
      "properties": {
        "content": {
          "type": "string"
        }
      }
    },
    "org.dbflute.intro.app.web.playsql.migration.alter.AlterSQLResult$NgMarkFilePart": {
      "type": "object",
      "required": [
        "ngMark",
        "content"
      ],
      "properties": {
        "ngMark": {
          "type": "string",
          "enum": [
            "previous-NG",
            "alter-NG",
            "next-NG"
          ],
          "description": " * `previous-NG` - PreviousNG. * `alter-NG` - AlterNG. * `next-NG` - NextNG. :: fromCls(CDef$NgMark)",
          "example": "previous-NG"
        },
        "content": {
          "description": "file content e.g. ALTER TABLE MEMBER ADD MAIHAMA_VISITED VARCHAR(3);",
          "type": "string",
          "example": "ALTER"
        }
      }
    },
    "org.dbflute.intro.app.web.playsql.migration.alter.AlterSQLResult$SQLFilePart": {
      "type": "object",
      "required": [
        "fileName",
        "content"
      ],
      "properties": {
        "fileName": {
          "description": "file name e.g. alter-sql-SAMPLE",
          "type": "string",
          "example": "alter-sql-SAMPLE.sql"
        },
        "content": {
          "description": "file content e.g. ALTER TABLE MEMBER ADD MAIHAMA_VISITED VARCHAR(3);",
          "type": "string",
          "example": "ALTER"
        }
      }
    },
    "org.dbflute.intro.app.web.playsql.migration.alter.AlterSQLResult$CheckedZipPart": {
      "type": "object",
      "required": [
        "fileName"
      ],
      "properties": {
        "fileName": {
          "description": "zip file name e.g. 20190831_2249/checked-alter-to-20190422-2332",
          "type": "string",
          "example": "20190831_2249/checked-alter-to-20190422-2332.zip"
        },
        "checkedFiles": {
          "description": "list of checked sql files",
          "type": "array",
          "items": {
            "$ref": "#/definitions/org.dbflute.intro.app.web.playsql.migration.alter.AlterSQLResult%24SQLFilePart"
          }
        }
      }
    },
    "org.dbflute.intro.app.web.playsql.migration.alter.AlterSQLResult$UnreleasedDirPart": {
      "type": "object",
      "properties": {
        "checkedFiles": {
          "description": "list of checked sql files",
          "type": "array",
          "items": {
            "$ref": "#/definitions/org.dbflute.intro.app.web.playsql.migration.alter.AlterSQLResult%24SQLFilePart"
          }
        }
      }
    },
    "org.dbflute.intro.app.web.playsql.migration.alter.AlterSQLResult": {
      "type": "object",
      "properties": {
        "ngMarkFile": {
          "$ref": "#/definitions/org.dbflute.intro.app.web.playsql.migration.alter.AlterSQLResult%24NgMarkFilePart"
        },
        "editingFiles": {
          "description": "list of editing sql files in dbflute_client/playsql/migration/alter directory",
          "type": "array",
          "items": {
            "$ref": "#/definitions/org.dbflute.intro.app.web.playsql.migration.alter.AlterSQLResult%24SQLFilePart"
          }
        },
        "checkedZip": {
          "$ref": "#/definitions/org.dbflute.intro.app.web.playsql.migration.alter.AlterSQLResult%24CheckedZipPart"
        },
        "unreleasedDir": {
          "$ref": "#/definitions/org.dbflute.intro.app.web.playsql.migration.alter.AlterSQLResult%24UnreleasedDirPart"
        }
      }
    },
    "org.dbflute.intro.app.web.playsql.migration.alter.AlterCreateBody": {
      "type": "object",
      "required": [
        "alterFileName"
      ],
      "properties": {
        "alterFileName": {
          "type": "string"
        }
      }
    },
    "org.dbflute.intro.app.web.task.TaskExecutionResult": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      }
    },
    "org.dbflute.intro.app.web.welcome.WelcomeCreateBody$ClientPart$DatabaseSettingsPart": {
      "type": "object",
      "required": [
        "url",
        "user"
      ],
      "properties": {
        "url": {
          "description": "JDBCの接続URL e.g. jdbc:mysql://localhost:3306/maihamadb",
          "type": "string",
          "example": "jdbc:mysql://localhost:3306/maihamadb"
        },
        "schema": {
          "description": "JDBCの接続スキーマ、DBMSによっては指定なし e.g. maihamadb",
          "type": "string",
          "example": "maihamadb"
        },
        "user": {
          "description": "JDBCの接続ユーザー e.g. maihamauser",
          "type": "string",
          "example": "maihamauser"
        },
        "password": {
          "description": "JDBCの接続パスワード、パスワードなしなら空っぽ e.g. maihamapass",
          "type": "string",
          "example": "maihamapass"
        }
      }
    },
    "org.dbflute.intro.app.web.welcome.WelcomeCreateBody$ClientPart$JdbcDriverPart": {
      "type": "object",
      "required": [
        "fileName",
        "data"
      ],
      "properties": {
        "fileName": {
          "description": "JDBCドライバーのjarファイルのファイル名 (パスなし、extlib配下で使われる) e.g. mysql-connector-java-5",
          "type": "string",
          "example": "mysql-connector-java-5.1.46-bin.jar"
        },
        "data": {
          "description": "JDBCドライバーのjarファイルの中身のデータ(Base64形式)、豪快だね e.g. QWERTYUIOP",
          "type": "string",
          "example": "QWERTYUIOP"
        }
      }
    },
    "org.dbflute.intro.app.web.welcome.WelcomeCreateBody$ClientPart": {
      "type": "object",
      "required": [
        "projectName",
        "databaseCode",
        "languageCode",
        "containerCode",
        "packageBase",
        "jdbcDriverFqcn",
        "mainSchemaSettings",
        "dbfluteVersion"
      ],
      "properties": {
        "projectName": {
          "description": "DBFluteクライアントのプロジェクト名 e.g. maihamadb",
          "type": "string",
          "example": "maihamadb"
        },
        "databaseCode": {
          "description": "DBMSを識別するコード e.g. mysql: * `mysql` - MySQL. * `postgresql` - PostgreSQL. * `oracle` - Oracle. * `db2` - Db2, DB2. * `sqlserver` - SQLServer. * `h2` - H2Database, H2 Database. * `derby` - ApacheDerby, Apache Derby. :: fromCls(CDef$TargetDatabase)",
          "type": "string",
          "enum": [
            "mysql",
            "postgresql",
            "oracle",
            "db2",
            "sqlserver",
            "h2",
            "derby"
          ],
          "example": "mysql"
        },
        "languageCode": {
          "description": "自動生成コードの言語を識別するコード e.g. java: * `java` - Java. * `csharp` - C, C#. * `scala` - Scala. :: fromCls(CDef$TargetLanguage)",
          "type": "string",
          "enum": [
            "java",
            "csharp",
            "scala"
          ],
          "example": "java"
        },
        "containerCode": {
          "description": "自動生成コードが利用するDIコンテナを識別するコード e.g. lasta_di: * `lasta_di` - LastaDi, Lasta Di. * `spring` - SpringFramework, Spring Framework. * `guice` - GoogleGuice, Google Guice. * `seasar` - SeasarS2Container, Seasar (S2Container). * `cdi` - Cdi, CDI. :: fromCls(CDef$TargetContainer)",
          "type": "string",
          "enum": [
            "lasta_di",
            "spring",
            "guice",
            "seasar",
            "cdi"
          ],
          "example": "lasta_di"
        },
        "packageBase": {
          "description": "自動生成コードの基底パッケージ (",
          "type": "string",
          "example": "org.docksidestage.showbase"
        },
        "jdbcDriverFqcn": {
          "description": "JDBCドライバーのクラス名 e.g. com",
          "type": "string",
          "example": "com.mysql.jdbc.Driver"
        },
        "mainSchemaSettings": {
          "$ref": "#/definitions/org.dbflute.intro.app.web.welcome.WelcomeCreateBody%24ClientPart%24DatabaseSettingsPart"
        },
        "dbfluteVersion": {
          "description": "DBFluteクライアント作成時のDBFluteエンジンのバージョン、基本的に最新 e.g. 1",
          "type": "string",
          "example": "1.2.6"
        },
        "jdbcDriver": {
          "$ref": "#/definitions/org.dbflute.intro.app.web.welcome.WelcomeCreateBody%24ClientPart%24JdbcDriverPart"
        }
      }
    },
    "org.dbflute.intro.app.web.welcome.WelcomeCreateBody": {
      "type": "object",
      "required": [
        "client",
        "testConnection"
      ],
      "properties": {
        "client": {
          "$ref": "#/definitions/org.dbflute.intro.app.web.welcome.WelcomeCreateBody%24ClientPart"
        },
        "testConnection": {
          "description": "DBMSへの接続テストを行うかどうか？ e.g. false",
          "type": "boolean",
          "example": false
        },
        "useSystemProxies": {
          "type": "boolean"
        }
      }
    }
  }
}