
# ========================================================================================
#                                                                        Framework Default
#                                                                        =================
# ----------------------------------------------------------
#                                            Javax Validator
#                                            ---------------
constraints.AssertFalse.message = must be false
constraints.AssertTrue.message  = must be true
constraints.DecimalMax.message  = must be less than ${inclusive == true ? 'or equal to ' : ''}{value}
constraints.DecimalMin.message  = must be greater than ${inclusive == true ? 'or equal to ' : ''}{value}
constraints.Digits.message      = numeric value out of bounds (<{integer} digits>.<{fraction} digits> expected)
constraints.Future.message      = must be in the future
constraints.Max.message         = must be less than or equal to {value}
constraints.Min.message         = must be greater than or equal to {value}
constraints.NotNull.message     = may not be null
constraints.Null.message        = must be null
constraints.Past.message        = must be in the past
constraints.Pattern.message     = must match "{regexp}"
constraints.Size.message        = size must be between {min} and {max}

# ----------------------------------------------------------
#                                        Hibernate Validator
#                                        -------------------
constraints.CreditCardNumber.message        = invalid credit card number
constraints.EAN.message                     = invalid {type} barcode
constraints.Email.message                   = not a well-formed email address
constraints.Length.message                  = length must be between {min} and {max}
constraints.LuhnCheck.message               = The check digit for ${value} is invalid, Luhn Modulo 10 checksum failed
constraints.Mod10Check.message              = The check digit for ${value} is invalid, Modulo 10 checksum failed
constraints.Mod11Check.message              = The check digit for ${value} is invalid, Modulo 11 checksum failed
constraints.ModCheck.message                = The check digit for ${value} is invalid, ${modType} checksum failed
constraints.NotBlank.message                = may not be empty
constraints.NotEmpty.message                = may not be empty
constraints.ParametersScriptAssert.message  = script expression "{script}" didn't evaluate to true
constraints.Range.message                   = must be between {min} and {max}
constraints.SafeHtml.message                = may have unsafe html content
constraints.ScriptAssert.message            = script expression "{script}" didn't evaluate to true
constraints.URL.message                     = must be a valid URL
constraints.Required.message                = is required
constraints.TypeAny.message                 = should be {propertyType}

# ----------------------------------------------------------
#                                      Application Exception
#                                      ---------------------
# /- - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# six framework-embedded messages (don't change key names)
# - - - - - - - - - -/
errors.login.failure=could not login
errors.app.illegal.transition=retry because of illegal transition
errors.app.db.already.deleted=others might be deleted, so retry
errors.app.db.already.updated=others might be updated, so retry
errors.app.db.already.exists=already existing data, so retry
errors.app.double.submit.request=double submit might be requested


# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
# you can define your messages here:
# e.g.
#  errors.xxx = ...
#  info.xxx = ...
# _/_/_/_/_/_/_/_/_/_/
# ========================================================================================
#                                                                           Project Common
#                                                                           ==============
# ----------------------------------------------------------
#                                      Application Exception
#                                      ---------------------
errors.app.intro.error = Intro Error => {0}
errors.app.file.operation.error = Intro Cannot operate files : {0}
errors.app.database.connection = Cannot connect to the database: {0}

errors.app.client.notFound = the DBFlute Client is not found: {0}
errors.app.dfprop.dir.notFound = the dfprop directory is not found: {0}
errors.app.dfprop.file.notFound = the dfprop file is not found: {0}
errors.app.playsql.dir.notFound = the playsql file is not found: {0}
errors.app.playsql.file.notFound = the playsql file is not found: {0}
errors.app.task.execute.failure = the DBFlute task execution failure: {0}
errors.app.network.error = the Network error. Please check your proxy setting
errors.app.deco.map.physical.error = the decomap physical error occurred : {0}

# ----------------------------------------------------------
#                                      Application Validator
#                                      ---------------------
errors.welcome.client.alreadyExists = client already exists: {0}
errors.database.needsJar = needs jar file: {0}
errors.string.of.null.not.accepted = Sorry, string of "null" is not accepted
errors.not.available.endpoint = this endpoint is not available
errors.invalid.file.name = submitted file name is invalid
errors.duplicate.file.name = submitted file already exists
errors.invalid.file.extension = submitted file type is invalid

# ----------------------------------------------------------
#                                           Client Exception
#                                           ----------------
errors.playsql.data.dir.notFound = the playsql data directory is not found
